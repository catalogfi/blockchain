// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package binding

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// InstantWalletInstantWalletState is an auto generated low-level Go binding around an user-defined struct.
type InstantWalletInstantWalletState struct {
	DisableUnderwritingInitiatedOn *big.Int
	Timelock                       *big.Int
	UnderwritingDisabled           bool
	Nonce                          *big.Int
	Owner                          common.Address
	Underwriter                    common.Address
}

// UserOperation is an auto generated low-level Go binding around an user-defined struct.
type UserOperation struct {
	Sender               common.Address
	Nonce                *big.Int
	InitCode             []byte
	CallData             []byte
	CallGasLimit         *big.Int
	VerificationGasLimit *big.Int
	PreVerificationGas   *big.Int
	MaxFeePerGas         *big.Int
	MaxPriorityFeePerGas *big.Int
	PaymasterAndData     []byte
	Signature            []byte
}

// InstantWalletMetaData contains all meta data concerning the InstantWallet contract.
var InstantWalletMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"entryPoint_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint88\",\"name\":\"_nonce\",\"type\":\"uint88\"}],\"name\":\"CatInstantWalletNonceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"LockInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"WalletLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underwriter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"__InstantWallet_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"func\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dest\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"func\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"disableUnderwritingInitiatedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"underwritingDisabled\",\"type\":\"bool\"},{\"internalType\":\"uint88\",\"name\":\"nonce\",\"type\":\"uint88\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"}],\"internalType\":\"structInstantWallet.InstantWalletState\",\"name\":\"s\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"toEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60c0604052306080523480156200001557600080fd5b506040516200281d3803806200281d83398101604081905262000038916200004a565b6001600160a01b031660a0526200007c565b6000602082840312156200005d57600080fd5b81516001600160a01b03811681146200007557600080fd5b9392505050565b60805160a05161274a620000d360003960008181610305015281816106ce01528181610b3201526112a80152600081816105a9015281816105e9015281816109130152818161095301526109e2015261274a6000f3fe6080604052600436106101235760003560e01c8063918a15cf116100a0578063b61d27f611610064578063b61d27f61461032f578063c19d93fb1461034f578063d547741f146103c5578063f1a57e8f146103e5578063f83d08ba1461040557600080fd5b8063918a15cf1461028157806391d14854146102a1578063a217fddf146102c1578063affed0e0146102d6578063b0d691fe146102eb57600080fd5b80633659cfe6116100e75780633659cfe6146101f95780633a871cdd1461021957806347e1da2a146102395780634f1ef2861461025957806352d1902d1461026c57600080fd5b806301ffc9a71461012f578063110e2d9514610164578063248a9ca31461017b5780632f2ff15d146101b957806336568abe146101d957600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014f61014a366004611fe5565b61041a565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b50610179610451565b005b34801561018757600080fd5b506101ab61019636600461200f565b600090815260c9602052604090206001015490565b60405190815260200161015b565b3480156101c557600080fd5b506101796101d4366004612044565b6104f7565b3480156101e557600080fd5b506101796101f4366004612044565b610521565b34801561020557600080fd5b50610179610214366004612070565b61059f565b34801561022557600080fd5b506101ab61023436600461208b565b61067e565b34801561024557600080fd5b50610179610254366004612124565b6106c3565b6101796102673660046121d4565b610909565b34801561027857600080fd5b506101ab6109d5565b34801561028d57600080fd5b506101ab61029c36600461200f565b610a88565b3480156102ad57600080fd5b5061014f6102bc366004612044565b610adb565b3480156102cd57600080fd5b506101ab600081565b3480156102e257600080fd5b506101ab610b06565b3480156102f757600080fd5b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016815260200161015b565b34801561033b57600080fd5b5061017961034a366004612296565b610b27565b34801561035b57600080fd5b50610364610c91565b60405161015b919081518152602080830151908201526040808301511515908201526060808301516001600160581b0316908201526080808301516001600160a01b039081169183019190915260a092830151169181019190915260c00190565b3480156103d157600080fd5b506101796103e0366004612044565b610d30565b3480156103f157600080fd5b5061017961040036600461231d565b610d55565b34801561041157600080fd5b50610179610e73565b60006001600160e01b03198216637965db0b60e01b148061044b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b3361045a610fae565b600201546001600160a01b03828116600160601b90920416146104985760405162461bcd60e51b815260040161048f90612359565b60405180910390fd5b436104a1610fae565b557f03f43569986cd664c9aea7cedf2507eee31477eb7e05eca63e5ec6f5fe07cd716104cb610fae565b600101546104d7610fae565b546104e291906123b5565b6040519081526020015b60405180910390a150565b600082815260c9602052604090206001015461051281610fd2565b61051c8383610fdc565b505050565b6001600160a01b03811633146105915760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161048f565b61059b8282611062565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105e75760405162461bcd60e51b815260040161048f906123c8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106306000805160206126ce833981519152546001600160a01b031690565b6001600160a01b0316146106565760405162461bcd60e51b815260040161048f90612414565b61065f816110c9565b6040805160008082526020820190925261067b91839190611132565b50565b600061068861129d565b6106928484611317565b90506106a16040850185612460565b90506000036106b3576106b384611482565b6106bc82611574565b9392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461070b5760405162461bcd60e51b815260040161048f906124a7565b610713610fae565b541580159061072e5750610725610fae565b6002015460ff16155b156107e65761073b610fae565b600301546001600160a01b0316610750610fae565b600201600c6101000a8154816001600160a01b0302191690836001600160a01b031602179055506001610781610fae565b600201805460ff19169115159190911790557fd69baa96a81a9efb7b3a965f382b8577de651c7f982adf82c15479b62518b7666107bc610fae565b60020154604051600160601b9091046001600160a01b0316815260200160405180910390a1610901565b8481146108415760405162461bcd60e51b815260206004820152602360248201527f496e7374616e7457616c6c6574203a2077726f6e67206172726179206c656e6760448201526274687360e81b606482015260840161048f565b60005b858110156108ff576108ed878783818110610861576108616124e8565b90506020020160208101906108769190612070565b868684818110610888576108886124e8565b905060200201358585858181106108a1576108a16124e8565b90506020028101906108b39190612460565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115cd92505050565b806108f7816124fe565b915050610844565b505b505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109515760405162461bcd60e51b815260040161048f906123c8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661099a6000805160206126ce833981519152546001600160a01b031690565b6001600160a01b0316146109c05760405162461bcd60e51b815260040161048f90612414565b6109c9826110c9565b61059b82826001611132565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a755760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161048f565b506000805160206126ce83398151915290565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610b10610fae565b6002015461010090046001600160581b0316919050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b6f5760405162461bcd60e51b815260040161048f906124a7565b610b77610fae565b5415801590610b925750610b89610fae565b6002015460ff16155b15610c4a57610b9f610fae565b600301546001600160a01b0316610bb4610fae565b600201600c6101000a8154816001600160a01b0302191690836001600160a01b031602179055506001610be5610fae565b600201805460ff19169115159190911790557fd69baa96a81a9efb7b3a965f382b8577de651c7f982adf82c15479b62518b766610c20610fae565b60020154604051600160601b9091046001600160a01b0316815260200160405180910390a1610c8b565b610c8b848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115cd92505050565b50505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152610ccb610fae565b6040805160c0810182528254815260018301546020820152600283015460ff81161515928201929092526001600160581b0361010083041660608201526001600160a01b03600160601b909204821660808201526003909201541660a0820152919050565b600082815260c96020526040902060010154610d4b81610fd2565b61051c8383611062565b600054610100900460ff1615808015610d755750600054600160ff909116105b80610d8f5750303b158015610d8f575060005460ff166001145b610df25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161048f565b6000805460ff191660011790558015610e15576000805461ff0019166101001790555b610e1d61163d565b610e28848484611664565b8015610c8b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b33610e7c610fae565b600201546001600160a01b03828116600160601b9092041614610eb15760405162461bcd60e51b815260040161048f90612359565b610eb9610fae565b5415801590610ee5575043610ecc610fae565b60010154610ed8610fae565b54610ee391906123b5565b105b610f475760405162461bcd60e51b815260206004820152602d60248201527f496e7374616e7457616c6c6574203a206c6f636b2074696d654c6f636b20686160448201526c1cc81b9bdd08195e1c1a5c9959609a1b606482015260840161048f565b6001610f51610fae565b600201805460ff19169115159190911790557fd69baa96a81a9efb7b3a965f382b8577de651c7f982adf82c15479b62518b766610f8c610fae565b60020154604051600160601b9091046001600160a01b031681526020016104ec565b7f89397a5b935976bc7ec3ad6ef7bc378fd3372ba7b99ef3fc8a48ef5221956e9990565b61067b81336117c8565b610fe68282610adb565b61059b57600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561101e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61106c8282610adb565b1561059b57600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b3330811461059b5760405162461bcd60e51b815260206004820152603060248201527f496e7374616e7457616c6c6574203a2075706772616465206e6f7420646f6e6560448201526f081d1a1bdd59da0818dbdb9d1c9858dd60821b606482015260840161048f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156111655761051c83611821565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156111bf575060408051601f3d908101601f191682019092526111bc91810190612517565b60015b6112225760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161048f565b6000805160206126ce83398151915281146112915760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161048f565b5061051c8383836118bd565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113155760405162461bcd60e51b815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e7400000000604482015260640161048f565b565b60008061132383610a88565b905061132d610fae565b6002015460ff16156113c057611341610fae565b60020154600160601b90046001600160a01b03166113a3611366610140870187612460565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086939250506118e29050565b6001600160a01b0316146113bb57600191505061044b565b611478565b6000806114106113d4610140880188612460565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250611906915050565b91509150816001600160a01b0316611426610fae565b60020154600160601b90046001600160a01b03161415806114645750806001600160a01b0316611454610fae565b600301546001600160a01b031614155b15611475576001935050505061044b565b50505b5060009392505050565b7fae672b0034062d7a2d07c82da5f38b7c8c960feee8d106755102d0b0b9d2ce1b6114ab610fae565b600201546040516101009091046001600160581b0316815260200160405180910390a180602001356114db610fae565b600201805461010090046001600160581b03169060016114fa83612530565b91906101000a8154816001600160581b0302191690836001600160581b031602179055506001600160581b03161461067b5760405162461bcd60e51b815260206004820152601d60248201527f496e7374616e7457616c6c6574203a20696e76616c6964206e6f6e6365000000604482015260640161048f565b801561067b57604051600090339060001990849084818181858888f193505050503d80600081146115c1576040519150601f19603f3d011682016040523d82523d6000602084013e6115c6565b606091505b5050505050565b600080846001600160a01b031684846040516115e9919061257a565b60006040518083038185875af1925050503d8060008114611626576040519150601f19603f3d011682016040523d82523d6000602084013e61162b565b606091505b5091509150816115c657805160208201fd5b600054610100900460ff166113155760405162461bcd60e51b815260040161048f90612596565b600054610100900460ff1661168b5760405162461bcd60e51b815260040161048f90612596565b6116b57fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e84610fdc565b6116df7ff63acc52fa4ad8a2695e14522f3df504db5c225cdd3d3a5acd3569b44457218783610fdc565b806116e8610fae565b60010155826116f5610fae565b600201600c6101000a8154816001600160a01b0302191690836001600160a01b0316021790555081611725610fae565b60030180546001600160a01b0319166001600160a01b03929092169190911790557fae672b0034062d7a2d07c82da5f38b7c8c960feee8d106755102d0b0b9d2ce1b61176f610fae565b600201546040516101009091046001600160581b0316815260200160405180910390a1600161179c610fae565b60020160016101000a8154816001600160581b0302191690836001600160581b03160217905550505050565b6117d28282610adb565b61059b576117df81611a70565b6117ea836020611a82565b6040516020016117fb9291906125e1565b60408051601f198184030181529082905262461bcd60e51b825261048f91600401612656565b6001600160a01b0381163b61188e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161048f565b6000805160206126ce83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6118c683611c1e565b6000825111806118d35750805b1561051c57610c8b8383611c5e565b60008060006118f18585611d52565b915091506118fe81611d94565b509392505050565b60008083516082146119745760405162461bcd60e51b815260206004820152603160248201527f496e7374616e7457616c6c6574203a20696e707574206279746573206d7573746044820152700206265206f66206c656e6774682031333607c1b606482015260840161048f565b60208481015160408087015160608089015160618a015160818b015160a18c0151865160008082529981018089528d905293891a96840187905293830187905260808301859052959693959092909190841a90849060019060a0016020604051602081039080840390855afa1580156119f1573d6000803e3d6000fd5b505060408051601f1981015160008252602082018084528f905260ff86169282019290925260608101879052608081018690529096506001915060a0016020604051602081039080840390855afa158015611a50573d6000803e3d6000fd5b5050604051601f190151959a5094985050505050505050505b9250929050565b606061044b6001600160a01b03831660145b60606000611a91836002612689565b611a9c9060026123b5565b67ffffffffffffffff811115611ab457611ab46121be565b6040519080825280601f01601f191660200182016040528015611ade576020820181803683370190505b509050600360fc1b81600081518110611af957611af96124e8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b2857611b286124e8565b60200101906001600160f81b031916908160001a9053506000611b4c846002612689565b611b579060016123b5565b90505b6001811115611bcf576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611b8b57611b8b6124e8565b1a60f81b828281518110611ba157611ba16124e8565b60200101906001600160f81b031916908160001a90535060049490941c93611bc8816126a0565b9050611b5a565b5083156106bc5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161048f565b611c2781611821565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611cc65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161048f565b600080846001600160a01b031684604051611ce1919061257a565b600060405180830381855af49150503d8060008114611d1c576040519150601f19603f3d011682016040523d82523d6000602084013e611d21565b606091505b5091509150611d4982826040518060600160405280602781526020016126ee60279139611ede565b95945050505050565b6000808251604103611d885760208301516040840151606085015160001a611d7c87828585611ef7565b94509450505050611a69565b50600090506002611a69565b6000816004811115611da857611da86126b7565b03611db05750565b6001816004811115611dc457611dc46126b7565b03611e115760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161048f565b6002816004811115611e2557611e256126b7565b03611e725760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161048f565b6003816004811115611e8657611e866126b7565b0361067b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161048f565b60608315611eed5750816106bc565b6106bc8383611fbb565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611f2e5750600090506003611fb2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611f82573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611fab57600060019250925050611fb2565b9150600090505b94509492505050565b815115611fcb5781518083602001fd5b8060405162461bcd60e51b815260040161048f9190612656565b600060208284031215611ff757600080fd5b81356001600160e01b0319811681146106bc57600080fd5b60006020828403121561202157600080fd5b5035919050565b80356001600160a01b038116811461203f57600080fd5b919050565b6000806040838503121561205757600080fd5b8235915061206760208401612028565b90509250929050565b60006020828403121561208257600080fd5b6106bc82612028565b6000806000606084860312156120a057600080fd5b833567ffffffffffffffff8111156120b757600080fd5b840161016081870312156120ca57600080fd5b95602085013595506040909401359392505050565b60008083601f8401126120f157600080fd5b50813567ffffffffffffffff81111561210957600080fd5b6020830191508360208260051b8501011115611a6957600080fd5b6000806000806000806060878903121561213d57600080fd5b863567ffffffffffffffff8082111561215557600080fd5b6121618a838b016120df565b9098509650602089013591508082111561217a57600080fd5b6121868a838b016120df565b9096509450604089013591508082111561219f57600080fd5b506121ac89828a016120df565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156121e757600080fd5b6121f083612028565b9150602083013567ffffffffffffffff8082111561220d57600080fd5b818501915085601f83011261222157600080fd5b813581811115612233576122336121be565b604051601f8201601f19908116603f0116810190838211818310171561225b5761225b6121be565b8160405282815288602084870101111561227457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600080606085870312156122ac57600080fd5b6122b585612028565b935060208501359250604085013567ffffffffffffffff808211156122d957600080fd5b818701915087601f8301126122ed57600080fd5b8135818111156122fc57600080fd5b88602082850101111561230e57600080fd5b95989497505060200194505050565b60008060006060848603121561233257600080fd5b61233b84612028565b925061234960208501612028565b9150604084013590509250925092565b60208082526026908201527f496e7374616e7457616c6c6574203a2063616c6c206e6f7420646f6e652062796040820152651037bbb732b960d11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561044b5761044b61239f565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000808335601e1984360301811261247757600080fd5b83018035915067ffffffffffffffff82111561249257600080fd5b602001915036819003821315611a6957600080fd5b60208082526021908201527f496e7374616e7457616c6c6574203a206e6f7420616e20456e747279506f696e6040820152601d60fa1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016125105761251061239f565b5060010190565b60006020828403121561252957600080fd5b5051919050565b60006001600160581b0380831681810361254c5761254c61239f565b6001019392505050565b60005b83811015612571578181015183820152602001612559565b50506000910152565b6000825161258c818460208701612556565b9190910192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612619816017850160208801612556565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161264a816028840160208801612556565b01602801949350505050565b6020815260008251806020840152612675816040850160208701612556565b601f01601f19169190910160400192915050565b808202811582820484141761044b5761044b61239f565b6000816126af576126af61239f565b506000190190565b634e487b7160e01b600052602160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122082f8b757caaae99c7ce19de5873b177c3840f9ab1a6ce94e27fc78f7a9b1175c64736f6c63430008120033",
}

// InstantWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use InstantWalletMetaData.ABI instead.
var InstantWalletABI = InstantWalletMetaData.ABI

// InstantWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use InstantWalletMetaData.Bin instead.
var InstantWalletBin = InstantWalletMetaData.Bin

// DeployInstantWallet deploys a new Ethereum contract, binding an instance of InstantWallet to it.
func DeployInstantWallet(auth *bind.TransactOpts, backend bind.ContractBackend, entryPoint_ common.Address) (common.Address, *types.Transaction, *InstantWallet, error) {
	parsed, err := InstantWalletMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(InstantWalletBin), backend, entryPoint_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &InstantWallet{InstantWalletCaller: InstantWalletCaller{contract: contract}, InstantWalletTransactor: InstantWalletTransactor{contract: contract}, InstantWalletFilterer: InstantWalletFilterer{contract: contract}}, nil
}

// InstantWallet is an auto generated Go binding around an Ethereum contract.
type InstantWallet struct {
	InstantWalletCaller     // Read-only binding to the contract
	InstantWalletTransactor // Write-only binding to the contract
	InstantWalletFilterer   // Log filterer for contract events
}

// InstantWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type InstantWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstantWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InstantWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstantWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InstantWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InstantWalletSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InstantWalletSession struct {
	Contract     *InstantWallet    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InstantWalletCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InstantWalletCallerSession struct {
	Contract *InstantWalletCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// InstantWalletTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InstantWalletTransactorSession struct {
	Contract     *InstantWalletTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// InstantWalletRaw is an auto generated low-level Go binding around an Ethereum contract.
type InstantWalletRaw struct {
	Contract *InstantWallet // Generic contract binding to access the raw methods on
}

// InstantWalletCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InstantWalletCallerRaw struct {
	Contract *InstantWalletCaller // Generic read-only contract binding to access the raw methods on
}

// InstantWalletTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InstantWalletTransactorRaw struct {
	Contract *InstantWalletTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInstantWallet creates a new instance of InstantWallet, bound to a specific deployed contract.
func NewInstantWallet(address common.Address, backend bind.ContractBackend) (*InstantWallet, error) {
	contract, err := bindInstantWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &InstantWallet{InstantWalletCaller: InstantWalletCaller{contract: contract}, InstantWalletTransactor: InstantWalletTransactor{contract: contract}, InstantWalletFilterer: InstantWalletFilterer{contract: contract}}, nil
}

// NewInstantWalletCaller creates a new read-only instance of InstantWallet, bound to a specific deployed contract.
func NewInstantWalletCaller(address common.Address, caller bind.ContractCaller) (*InstantWalletCaller, error) {
	contract, err := bindInstantWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InstantWalletCaller{contract: contract}, nil
}

// NewInstantWalletTransactor creates a new write-only instance of InstantWallet, bound to a specific deployed contract.
func NewInstantWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*InstantWalletTransactor, error) {
	contract, err := bindInstantWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InstantWalletTransactor{contract: contract}, nil
}

// NewInstantWalletFilterer creates a new log filterer instance of InstantWallet, bound to a specific deployed contract.
func NewInstantWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*InstantWalletFilterer, error) {
	contract, err := bindInstantWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InstantWalletFilterer{contract: contract}, nil
}

// bindInstantWallet binds a generic wrapper to an already deployed contract.
func bindInstantWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := InstantWalletMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InstantWallet *InstantWalletRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InstantWallet.Contract.InstantWalletCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InstantWallet *InstantWalletRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InstantWallet.Contract.InstantWalletTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InstantWallet *InstantWalletRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InstantWallet.Contract.InstantWalletTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_InstantWallet *InstantWalletCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _InstantWallet.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_InstantWallet *InstantWalletTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InstantWallet.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_InstantWallet *InstantWalletTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _InstantWallet.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_InstantWallet *InstantWalletCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_InstantWallet *InstantWalletSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _InstantWallet.Contract.DEFAULTADMINROLE(&_InstantWallet.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_InstantWallet *InstantWalletCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _InstantWallet.Contract.DEFAULTADMINROLE(&_InstantWallet.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_InstantWallet *InstantWalletCaller) EntryPoint(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "entryPoint")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_InstantWallet *InstantWalletSession) EntryPoint() (common.Address, error) {
	return _InstantWallet.Contract.EntryPoint(&_InstantWallet.CallOpts)
}

// EntryPoint is a free data retrieval call binding the contract method 0xb0d691fe.
//
// Solidity: function entryPoint() view returns(address)
func (_InstantWallet *InstantWalletCallerSession) EntryPoint() (common.Address, error) {
	return _InstantWallet.Contract.EntryPoint(&_InstantWallet.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_InstantWallet *InstantWalletCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_InstantWallet *InstantWalletSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _InstantWallet.Contract.GetRoleAdmin(&_InstantWallet.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_InstantWallet *InstantWalletCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _InstantWallet.Contract.GetRoleAdmin(&_InstantWallet.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_InstantWallet *InstantWalletCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_InstantWallet *InstantWalletSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _InstantWallet.Contract.HasRole(&_InstantWallet.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_InstantWallet *InstantWalletCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _InstantWallet.Contract.HasRole(&_InstantWallet.CallOpts, role, account)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_InstantWallet *InstantWalletCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_InstantWallet *InstantWalletSession) Nonce() (*big.Int, error) {
	return _InstantWallet.Contract.Nonce(&_InstantWallet.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_InstantWallet *InstantWalletCallerSession) Nonce() (*big.Int, error) {
	return _InstantWallet.Contract.Nonce(&_InstantWallet.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_InstantWallet *InstantWalletCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_InstantWallet *InstantWalletSession) ProxiableUUID() ([32]byte, error) {
	return _InstantWallet.Contract.ProxiableUUID(&_InstantWallet.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_InstantWallet *InstantWalletCallerSession) ProxiableUUID() ([32]byte, error) {
	return _InstantWallet.Contract.ProxiableUUID(&_InstantWallet.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() pure returns((uint256,uint256,bool,uint88,address,address) s)
func (_InstantWallet *InstantWalletCaller) State(opts *bind.CallOpts) (InstantWalletInstantWalletState, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "state")

	if err != nil {
		return *new(InstantWalletInstantWalletState), err
	}

	out0 := *abi.ConvertType(out[0], new(InstantWalletInstantWalletState)).(*InstantWalletInstantWalletState)

	return out0, err

}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() pure returns((uint256,uint256,bool,uint88,address,address) s)
func (_InstantWallet *InstantWalletSession) State() (InstantWalletInstantWalletState, error) {
	return _InstantWallet.Contract.State(&_InstantWallet.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() pure returns((uint256,uint256,bool,uint88,address,address) s)
func (_InstantWallet *InstantWalletCallerSession) State() (InstantWalletInstantWalletState, error) {
	return _InstantWallet.Contract.State(&_InstantWallet.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_InstantWallet *InstantWalletCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_InstantWallet *InstantWalletSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _InstantWallet.Contract.SupportsInterface(&_InstantWallet.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_InstantWallet *InstantWalletCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _InstantWallet.Contract.SupportsInterface(&_InstantWallet.CallOpts, interfaceId)
}

// ToEthSignedMessageHash is a free data retrieval call binding the contract method 0x918a15cf.
//
// Solidity: function toEthSignedMessageHash(bytes32 hash) pure returns(bytes32)
func (_InstantWallet *InstantWalletCaller) ToEthSignedMessageHash(opts *bind.CallOpts, hash [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _InstantWallet.contract.Call(opts, &out, "toEthSignedMessageHash", hash)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ToEthSignedMessageHash is a free data retrieval call binding the contract method 0x918a15cf.
//
// Solidity: function toEthSignedMessageHash(bytes32 hash) pure returns(bytes32)
func (_InstantWallet *InstantWalletSession) ToEthSignedMessageHash(hash [32]byte) ([32]byte, error) {
	return _InstantWallet.Contract.ToEthSignedMessageHash(&_InstantWallet.CallOpts, hash)
}

// ToEthSignedMessageHash is a free data retrieval call binding the contract method 0x918a15cf.
//
// Solidity: function toEthSignedMessageHash(bytes32 hash) pure returns(bytes32)
func (_InstantWallet *InstantWalletCallerSession) ToEthSignedMessageHash(hash [32]byte) ([32]byte, error) {
	return _InstantWallet.Contract.ToEthSignedMessageHash(&_InstantWallet.CallOpts, hash)
}

// InstantWalletInit is a paid mutator transaction binding the contract method 0xf1a57e8f.
//
// Solidity: function __InstantWallet_init(address _owner, address _underwriter, uint256 _timelock) returns()
func (_InstantWallet *InstantWalletTransactor) InstantWalletInit(opts *bind.TransactOpts, _owner common.Address, _underwriter common.Address, _timelock *big.Int) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "__InstantWallet_init", _owner, _underwriter, _timelock)
}

// InstantWalletInit is a paid mutator transaction binding the contract method 0xf1a57e8f.
//
// Solidity: function __InstantWallet_init(address _owner, address _underwriter, uint256 _timelock) returns()
func (_InstantWallet *InstantWalletSession) InstantWalletInit(_owner common.Address, _underwriter common.Address, _timelock *big.Int) (*types.Transaction, error) {
	return _InstantWallet.Contract.InstantWalletInit(&_InstantWallet.TransactOpts, _owner, _underwriter, _timelock)
}

// InstantWalletInit is a paid mutator transaction binding the contract method 0xf1a57e8f.
//
// Solidity: function __InstantWallet_init(address _owner, address _underwriter, uint256 _timelock) returns()
func (_InstantWallet *InstantWalletTransactorSession) InstantWalletInit(_owner common.Address, _underwriter common.Address, _timelock *big.Int) (*types.Transaction, error) {
	return _InstantWallet.Contract.InstantWalletInit(&_InstantWallet.TransactOpts, _owner, _underwriter, _timelock)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_InstantWallet *InstantWalletTransactor) Execute(opts *bind.TransactOpts, dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "execute", dest, value, arg2)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_InstantWallet *InstantWalletSession) Execute(dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _InstantWallet.Contract.Execute(&_InstantWallet.TransactOpts, dest, value, arg2)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(address dest, uint256 value, bytes func) returns()
func (_InstantWallet *InstantWalletTransactorSession) Execute(dest common.Address, value *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _InstantWallet.Contract.Execute(&_InstantWallet.TransactOpts, dest, value, arg2)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x47e1da2a.
//
// Solidity: function executeBatch(address[] dest, uint256[] values, bytes[] func) returns()
func (_InstantWallet *InstantWalletTransactor) ExecuteBatch(opts *bind.TransactOpts, dest []common.Address, values []*big.Int, arg2 [][]byte) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "executeBatch", dest, values, arg2)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x47e1da2a.
//
// Solidity: function executeBatch(address[] dest, uint256[] values, bytes[] func) returns()
func (_InstantWallet *InstantWalletSession) ExecuteBatch(dest []common.Address, values []*big.Int, arg2 [][]byte) (*types.Transaction, error) {
	return _InstantWallet.Contract.ExecuteBatch(&_InstantWallet.TransactOpts, dest, values, arg2)
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0x47e1da2a.
//
// Solidity: function executeBatch(address[] dest, uint256[] values, bytes[] func) returns()
func (_InstantWallet *InstantWalletTransactorSession) ExecuteBatch(dest []common.Address, values []*big.Int, arg2 [][]byte) (*types.Transaction, error) {
	return _InstantWallet.Contract.ExecuteBatch(&_InstantWallet.TransactOpts, dest, values, arg2)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.GrantRole(&_InstantWallet.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.GrantRole(&_InstantWallet.TransactOpts, role, account)
}

// InitiateLock is a paid mutator transaction binding the contract method 0x110e2d95.
//
// Solidity: function initiateLock() returns()
func (_InstantWallet *InstantWalletTransactor) InitiateLock(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "initiateLock")
}

// InitiateLock is a paid mutator transaction binding the contract method 0x110e2d95.
//
// Solidity: function initiateLock() returns()
func (_InstantWallet *InstantWalletSession) InitiateLock() (*types.Transaction, error) {
	return _InstantWallet.Contract.InitiateLock(&_InstantWallet.TransactOpts)
}

// InitiateLock is a paid mutator transaction binding the contract method 0x110e2d95.
//
// Solidity: function initiateLock() returns()
func (_InstantWallet *InstantWalletTransactorSession) InitiateLock() (*types.Transaction, error) {
	return _InstantWallet.Contract.InitiateLock(&_InstantWallet.TransactOpts)
}

// Lock is a paid mutator transaction binding the contract method 0xf83d08ba.
//
// Solidity: function lock() returns()
func (_InstantWallet *InstantWalletTransactor) Lock(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "lock")
}

// Lock is a paid mutator transaction binding the contract method 0xf83d08ba.
//
// Solidity: function lock() returns()
func (_InstantWallet *InstantWalletSession) Lock() (*types.Transaction, error) {
	return _InstantWallet.Contract.Lock(&_InstantWallet.TransactOpts)
}

// Lock is a paid mutator transaction binding the contract method 0xf83d08ba.
//
// Solidity: function lock() returns()
func (_InstantWallet *InstantWalletTransactorSession) Lock() (*types.Transaction, error) {
	return _InstantWallet.Contract.Lock(&_InstantWallet.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.RenounceRole(&_InstantWallet.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.RenounceRole(&_InstantWallet.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.RevokeRole(&_InstantWallet.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_InstantWallet *InstantWalletTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.RevokeRole(&_InstantWallet.TransactOpts, role, account)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InstantWallet *InstantWalletTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InstantWallet *InstantWalletSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.UpgradeTo(&_InstantWallet.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_InstantWallet *InstantWalletTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _InstantWallet.Contract.UpgradeTo(&_InstantWallet.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InstantWallet *InstantWalletTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InstantWallet *InstantWalletSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InstantWallet.Contract.UpgradeToAndCall(&_InstantWallet.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_InstantWallet *InstantWalletTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _InstantWallet.Contract.UpgradeToAndCall(&_InstantWallet.TransactOpts, newImplementation, data)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x3a871cdd.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) returns(uint256 validationData)
func (_InstantWallet *InstantWalletTransactor) ValidateUserOp(opts *bind.TransactOpts, userOp UserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _InstantWallet.contract.Transact(opts, "validateUserOp", userOp, userOpHash, missingAccountFunds)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x3a871cdd.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) returns(uint256 validationData)
func (_InstantWallet *InstantWalletSession) ValidateUserOp(userOp UserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _InstantWallet.Contract.ValidateUserOp(&_InstantWallet.TransactOpts, userOp, userOpHash, missingAccountFunds)
}

// ValidateUserOp is a paid mutator transaction binding the contract method 0x3a871cdd.
//
// Solidity: function validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes) userOp, bytes32 userOpHash, uint256 missingAccountFunds) returns(uint256 validationData)
func (_InstantWallet *InstantWalletTransactorSession) ValidateUserOp(userOp UserOperation, userOpHash [32]byte, missingAccountFunds *big.Int) (*types.Transaction, error) {
	return _InstantWallet.Contract.ValidateUserOp(&_InstantWallet.TransactOpts, userOp, userOpHash, missingAccountFunds)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_InstantWallet *InstantWalletTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _InstantWallet.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_InstantWallet *InstantWalletSession) Receive() (*types.Transaction, error) {
	return _InstantWallet.Contract.Receive(&_InstantWallet.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_InstantWallet *InstantWalletTransactorSession) Receive() (*types.Transaction, error) {
	return _InstantWallet.Contract.Receive(&_InstantWallet.TransactOpts)
}

// InstantWalletAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the InstantWallet contract.
type InstantWalletAdminChangedIterator struct {
	Event *InstantWalletAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletAdminChanged represents a AdminChanged event raised by the InstantWallet contract.
type InstantWalletAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InstantWallet *InstantWalletFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*InstantWalletAdminChangedIterator, error) {

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &InstantWalletAdminChangedIterator{contract: _InstantWallet.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InstantWallet *InstantWalletFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *InstantWalletAdminChanged) (event.Subscription, error) {

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletAdminChanged)
				if err := _InstantWallet.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_InstantWallet *InstantWalletFilterer) ParseAdminChanged(log types.Log) (*InstantWalletAdminChanged, error) {
	event := new(InstantWalletAdminChanged)
	if err := _InstantWallet.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the InstantWallet contract.
type InstantWalletBeaconUpgradedIterator struct {
	Event *InstantWalletBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletBeaconUpgraded represents a BeaconUpgraded event raised by the InstantWallet contract.
type InstantWalletBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_InstantWallet *InstantWalletFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*InstantWalletBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &InstantWalletBeaconUpgradedIterator{contract: _InstantWallet.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_InstantWallet *InstantWalletFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *InstantWalletBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletBeaconUpgraded)
				if err := _InstantWallet.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_InstantWallet *InstantWalletFilterer) ParseBeaconUpgraded(log types.Log) (*InstantWalletBeaconUpgraded, error) {
	event := new(InstantWalletBeaconUpgraded)
	if err := _InstantWallet.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletCatInstantWalletNonceUpdateIterator is returned from FilterCatInstantWalletNonceUpdate and is used to iterate over the raw logs and unpacked data for CatInstantWalletNonceUpdate events raised by the InstantWallet contract.
type InstantWalletCatInstantWalletNonceUpdateIterator struct {
	Event *InstantWalletCatInstantWalletNonceUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletCatInstantWalletNonceUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletCatInstantWalletNonceUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletCatInstantWalletNonceUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletCatInstantWalletNonceUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletCatInstantWalletNonceUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletCatInstantWalletNonceUpdate represents a CatInstantWalletNonceUpdate event raised by the InstantWallet contract.
type InstantWalletCatInstantWalletNonceUpdate struct {
	Nonce *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCatInstantWalletNonceUpdate is a free log retrieval operation binding the contract event 0xae672b0034062d7a2d07c82da5f38b7c8c960feee8d106755102d0b0b9d2ce1b.
//
// Solidity: event CatInstantWalletNonceUpdate(uint88 _nonce)
func (_InstantWallet *InstantWalletFilterer) FilterCatInstantWalletNonceUpdate(opts *bind.FilterOpts) (*InstantWalletCatInstantWalletNonceUpdateIterator, error) {

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "CatInstantWalletNonceUpdate")
	if err != nil {
		return nil, err
	}
	return &InstantWalletCatInstantWalletNonceUpdateIterator{contract: _InstantWallet.contract, event: "CatInstantWalletNonceUpdate", logs: logs, sub: sub}, nil
}

// WatchCatInstantWalletNonceUpdate is a free log subscription operation binding the contract event 0xae672b0034062d7a2d07c82da5f38b7c8c960feee8d106755102d0b0b9d2ce1b.
//
// Solidity: event CatInstantWalletNonceUpdate(uint88 _nonce)
func (_InstantWallet *InstantWalletFilterer) WatchCatInstantWalletNonceUpdate(opts *bind.WatchOpts, sink chan<- *InstantWalletCatInstantWalletNonceUpdate) (event.Subscription, error) {

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "CatInstantWalletNonceUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletCatInstantWalletNonceUpdate)
				if err := _InstantWallet.contract.UnpackLog(event, "CatInstantWalletNonceUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCatInstantWalletNonceUpdate is a log parse operation binding the contract event 0xae672b0034062d7a2d07c82da5f38b7c8c960feee8d106755102d0b0b9d2ce1b.
//
// Solidity: event CatInstantWalletNonceUpdate(uint88 _nonce)
func (_InstantWallet *InstantWalletFilterer) ParseCatInstantWalletNonceUpdate(log types.Log) (*InstantWalletCatInstantWalletNonceUpdate, error) {
	event := new(InstantWalletCatInstantWalletNonceUpdate)
	if err := _InstantWallet.contract.UnpackLog(event, "CatInstantWalletNonceUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the InstantWallet contract.
type InstantWalletInitializedIterator struct {
	Event *InstantWalletInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletInitialized represents a Initialized event raised by the InstantWallet contract.
type InstantWalletInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_InstantWallet *InstantWalletFilterer) FilterInitialized(opts *bind.FilterOpts) (*InstantWalletInitializedIterator, error) {

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &InstantWalletInitializedIterator{contract: _InstantWallet.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_InstantWallet *InstantWalletFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *InstantWalletInitialized) (event.Subscription, error) {

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletInitialized)
				if err := _InstantWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_InstantWallet *InstantWalletFilterer) ParseInitialized(log types.Log) (*InstantWalletInitialized, error) {
	event := new(InstantWalletInitialized)
	if err := _InstantWallet.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletLockInitiatedIterator is returned from FilterLockInitiated and is used to iterate over the raw logs and unpacked data for LockInitiated events raised by the InstantWallet contract.
type InstantWalletLockInitiatedIterator struct {
	Event *InstantWalletLockInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletLockInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletLockInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletLockInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletLockInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletLockInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletLockInitiated represents a LockInitiated event raised by the InstantWallet contract.
type InstantWalletLockInitiated struct {
	Expiry *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLockInitiated is a free log retrieval operation binding the contract event 0x03f43569986cd664c9aea7cedf2507eee31477eb7e05eca63e5ec6f5fe07cd71.
//
// Solidity: event LockInitiated(uint256 _expiry)
func (_InstantWallet *InstantWalletFilterer) FilterLockInitiated(opts *bind.FilterOpts) (*InstantWalletLockInitiatedIterator, error) {

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "LockInitiated")
	if err != nil {
		return nil, err
	}
	return &InstantWalletLockInitiatedIterator{contract: _InstantWallet.contract, event: "LockInitiated", logs: logs, sub: sub}, nil
}

// WatchLockInitiated is a free log subscription operation binding the contract event 0x03f43569986cd664c9aea7cedf2507eee31477eb7e05eca63e5ec6f5fe07cd71.
//
// Solidity: event LockInitiated(uint256 _expiry)
func (_InstantWallet *InstantWalletFilterer) WatchLockInitiated(opts *bind.WatchOpts, sink chan<- *InstantWalletLockInitiated) (event.Subscription, error) {

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "LockInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletLockInitiated)
				if err := _InstantWallet.contract.UnpackLog(event, "LockInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockInitiated is a log parse operation binding the contract event 0x03f43569986cd664c9aea7cedf2507eee31477eb7e05eca63e5ec6f5fe07cd71.
//
// Solidity: event LockInitiated(uint256 _expiry)
func (_InstantWallet *InstantWalletFilterer) ParseLockInitiated(log types.Log) (*InstantWalletLockInitiated, error) {
	event := new(InstantWalletLockInitiated)
	if err := _InstantWallet.contract.UnpackLog(event, "LockInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the InstantWallet contract.
type InstantWalletRoleAdminChangedIterator struct {
	Event *InstantWalletRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletRoleAdminChanged represents a RoleAdminChanged event raised by the InstantWallet contract.
type InstantWalletRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_InstantWallet *InstantWalletFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*InstantWalletRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &InstantWalletRoleAdminChangedIterator{contract: _InstantWallet.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_InstantWallet *InstantWalletFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *InstantWalletRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletRoleAdminChanged)
				if err := _InstantWallet.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_InstantWallet *InstantWalletFilterer) ParseRoleAdminChanged(log types.Log) (*InstantWalletRoleAdminChanged, error) {
	event := new(InstantWalletRoleAdminChanged)
	if err := _InstantWallet.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the InstantWallet contract.
type InstantWalletRoleGrantedIterator struct {
	Event *InstantWalletRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletRoleGranted represents a RoleGranted event raised by the InstantWallet contract.
type InstantWalletRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_InstantWallet *InstantWalletFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*InstantWalletRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &InstantWalletRoleGrantedIterator{contract: _InstantWallet.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_InstantWallet *InstantWalletFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *InstantWalletRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletRoleGranted)
				if err := _InstantWallet.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_InstantWallet *InstantWalletFilterer) ParseRoleGranted(log types.Log) (*InstantWalletRoleGranted, error) {
	event := new(InstantWalletRoleGranted)
	if err := _InstantWallet.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the InstantWallet contract.
type InstantWalletRoleRevokedIterator struct {
	Event *InstantWalletRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletRoleRevoked represents a RoleRevoked event raised by the InstantWallet contract.
type InstantWalletRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_InstantWallet *InstantWalletFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*InstantWalletRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &InstantWalletRoleRevokedIterator{contract: _InstantWallet.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_InstantWallet *InstantWalletFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *InstantWalletRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletRoleRevoked)
				if err := _InstantWallet.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_InstantWallet *InstantWalletFilterer) ParseRoleRevoked(log types.Log) (*InstantWalletRoleRevoked, error) {
	event := new(InstantWalletRoleRevoked)
	if err := _InstantWallet.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the InstantWallet contract.
type InstantWalletUpgradedIterator struct {
	Event *InstantWalletUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletUpgraded represents a Upgraded event raised by the InstantWallet contract.
type InstantWalletUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InstantWallet *InstantWalletFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*InstantWalletUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &InstantWalletUpgradedIterator{contract: _InstantWallet.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InstantWallet *InstantWalletFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *InstantWalletUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletUpgraded)
				if err := _InstantWallet.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_InstantWallet *InstantWalletFilterer) ParseUpgraded(log types.Log) (*InstantWalletUpgraded, error) {
	event := new(InstantWalletUpgraded)
	if err := _InstantWallet.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// InstantWalletWalletLockedIterator is returned from FilterWalletLocked and is used to iterate over the raw logs and unpacked data for WalletLocked events raised by the InstantWallet contract.
type InstantWalletWalletLockedIterator struct {
	Event *InstantWalletWalletLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *InstantWalletWalletLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(InstantWalletWalletLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(InstantWalletWalletLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *InstantWalletWalletLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *InstantWalletWalletLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// InstantWalletWalletLocked represents a WalletLocked event raised by the InstantWallet contract.
type InstantWalletWalletLocked struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWalletLocked is a free log retrieval operation binding the contract event 0xd69baa96a81a9efb7b3a965f382b8577de651c7f982adf82c15479b62518b766.
//
// Solidity: event WalletLocked(address _owner)
func (_InstantWallet *InstantWalletFilterer) FilterWalletLocked(opts *bind.FilterOpts) (*InstantWalletWalletLockedIterator, error) {

	logs, sub, err := _InstantWallet.contract.FilterLogs(opts, "WalletLocked")
	if err != nil {
		return nil, err
	}
	return &InstantWalletWalletLockedIterator{contract: _InstantWallet.contract, event: "WalletLocked", logs: logs, sub: sub}, nil
}

// WatchWalletLocked is a free log subscription operation binding the contract event 0xd69baa96a81a9efb7b3a965f382b8577de651c7f982adf82c15479b62518b766.
//
// Solidity: event WalletLocked(address _owner)
func (_InstantWallet *InstantWalletFilterer) WatchWalletLocked(opts *bind.WatchOpts, sink chan<- *InstantWalletWalletLocked) (event.Subscription, error) {

	logs, sub, err := _InstantWallet.contract.WatchLogs(opts, "WalletLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(InstantWalletWalletLocked)
				if err := _InstantWallet.contract.UnpackLog(event, "WalletLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWalletLocked is a log parse operation binding the contract event 0xd69baa96a81a9efb7b3a965f382b8577de651c7f982adf82c15479b62518b766.
//
// Solidity: event WalletLocked(address _owner)
func (_InstantWallet *InstantWalletFilterer) ParseWalletLocked(log types.Log) (*InstantWalletWalletLocked, error) {
	event := new(InstantWalletWalletLocked)
	if err := _InstantWallet.contract.UnpackLog(event, "WalletLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
