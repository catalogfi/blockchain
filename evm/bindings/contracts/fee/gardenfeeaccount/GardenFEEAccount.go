// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gardenfeeaccount

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FeeAccountHTLC is an auto generated low-level Go binding around an user-defined struct.
type FeeAccountHTLC struct {
	SecretHash    [32]byte
	Expiry        *big.Int
	SendAmount    *big.Int
	RecieveAmount *big.Int
}

// GardenFEEAccountMetaData contains all meta data concerning the GardenFEEAccount contract.
var GardenFEEAccountMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"funder_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"feeAccountName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeAccountVersion\",\"type\":\"string\"}],\"name\":\"__FeeAccount_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieveAmount\",\"type\":\"uint256\"}],\"internalType\":\"structFeeAccount.HTLC[]\",\"name\":\"htlcs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"secrets_\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"funderSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"recipientSig\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recieveAmount\",\"type\":\"uint256\"}],\"internalType\":\"structFeeAccount.HTLC[]\",\"name\":\"htlcs\",\"type\":\"tuple[]\"}],\"name\":\"claimHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"funderSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"recipientSig\",\"type\":\"bytes\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractIFeeAccountFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"secrets\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"secretsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b6141dd80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806384b0196e11610097578063affed0e011610066578063affed0e01461027d578063c45a01551461029b578063ef74e594146102b9578063fc0c546a146102e957610100565b806384b0196e146101ef5780639044ef1014610213578063954cb64914610243578063aa8c217c1461025f57610100565b80634665096d116100d35780634665096d1461016757806366d003ac1461018557806374cb7eaf146101a35780637f713261146101bf57610100565b8063041ae8801461010557806311da60b4146101235780631a39d8ef1461012d578063442752891461014b575b600080fd5b61010d610307565b60405161011a919061204d565b60405180910390f35b61012b61032d565b005b6101356103c4565b6040516101429190612081565b60405180910390f35b61016560048036038101906101609190612222565b610467565b005b61016f61061b565b60405161017c9190612081565b60405180910390f35b61018d610621565b60405161019a919061204d565b60405180910390f35b6101bd60048036038101906101b89190612509565b610647565b005b6101d960048036038101906101d49190612606565b610d19565b6040516101e69190612081565b60405180910390f35b6101f7610d47565b60405161020a97969594939291906127d6565b60405180910390f35b61022d6004803603810190610228919061285a565b610e48565b60405161023a91906128c9565b60405180910390f35b61025d600480360381019061025891906129ef565b611026565b005b610267611176565b6040516102749190612081565b60405180910390f35b61028561117c565b6040516102929190612081565b60405180910390f35b6102a3611182565b6040516102b09190612b01565b60405180910390f35b6102d360048036038101906102ce9190612b1c565b6111a8565b6040516102e09190612b9e565b60405180910390f35b6102f1611248565b6040516102fe9190612be1565b60405180910390f35b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603b5411610372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036990612c48565b60405180910390fd5b43603b5411156103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae90612cb4565b60405180910390fd5b6103c260395461126e565b565b6000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610421919061204d565b602060405180830381865afa15801561043e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104629190612ce9565b905090565b60006104ba7fcf0daf8bd9fd8013fd978c075b500d357fd126cca7a8dc77e13ef295ad19538c8560405160200161049f929190612d16565b6040516020818303038152906040528051906020012061143d565b905060006104d1848361145790919063ffffffff16565b905060006104e8848461145790919063ffffffff16565b9050603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190612db1565b60405180910390fd5b603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060190612e43565b60405180910390fd5b6106138661126e565b505050505050565b603b5481565b603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b825184511461068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290612eaf565b60405180910390fd5b6000845111801561069c5750600085145b156106dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d390612f41565b60405180910390fd5b60006106e9878787610e48565b905085603a541480156106ff57506000603b5414155b1561070a5760395496505b6000805b8651811015610a37576000603c603d60008a858151811061073257610731612f61565b5b60200260200101516000015181526020019081526020016000206040516107599190613093565b90815260200160405180910390205411156108785787603c603d60008a858151811061078857610787612f61565b5b60200260200101516000015181526020019081526020016000206040516107af9190613093565b90815260200160405180910390205414610873576001915087603c603d60008a85815181106107e1576107e0612f61565b5b60200260200101516000015181526020019081526020016000206040516108089190613093565b90815260200160405180910390208190555086818151811061082d5761082c612f61565b5b6020026020010151604001518961084491906130d9565b985086818151811061085957610858612f61565b5b60200260200101516060015189610870919061310d565b98505b610a24565b4387828151811061088c5761088b612f61565b5b60200260200101516020015111801561092b57508681815181106108b3576108b2612f61565b5b60200260200101516000015160028783815181106108d4576108d3612f61565b5b60200260200101516040516108e99190613172565b602060405180830381855afa158015610906573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610929919061319e565b145b15610a23576001915087603c87838151811061094a57610949612f61565b5b602002602001015160405161095f9190613172565b90815260200160405180910390208190555085818151811061098457610983612f61565b5b6020026020010151603d60008984815181106109a3576109a2612f61565b5b602002602001015160000151815260200190815260200160002090816109c99190613358565b508681815181106109dd576109dc612f61565b5b602002602001015160400151896109f491906130d9565b9850868181518110610a0957610a08612f61565b5b60200260200101516060015189610a20919061310d565b98505b5b8080610a2f9061342a565b91505061070e565b50610a406103c4565b881115610a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a79906134be565b60405180910390fd5b6000603b5414610ae657603a54871180610aa65750603a5487148015610aa55750805b5b610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90613550565b60405180910390fd5b5b6000610afb858461145790919063ffffffff16565b90506000610b12858561145790919063ffffffff16565b9050603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90612db1565b60405180910390fd5b603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b90612e43565b60405180910390fd5b61384043610c4291906130d9565b603b819055508960398190555088603a81905550603860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cfd94956603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8c603b546040518563ffffffff1660e01b8152600401610cdb9493929190613570565b600060405180830381600087803b158015610cf557600080fd5b505af1158015610d09573d6000803e3d6000fd5b5050505050505050505050505050565b603c818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000606080600080600060606000801b600154148015610d6b57506000801b600254145b610daa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da190613601565b60405180910390fd5b610db261147e565b610dba611510565b46306000801b600067ffffffffffffffff811115610ddb57610dda6120f7565b5b604051908082528060200260200182016040528015610e095781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b600080825167ffffffffffffffff811115610e6657610e656120f7565b5b604051908082528060200260200182016040528015610e945781602001602082028036833780820191505090505b50905060005b8351811015610f9c577f9edaeb674a2afbc211c38f8e024f189da7eb763fc4966476965fa9bd1ea30a7c848281518110610ed757610ed6612f61565b5b602002602001015160000151858381518110610ef657610ef5612f61565b5b602002602001015160200151868481518110610f1557610f14612f61565b5b602002602001015160400151878581518110610f3457610f33612f61565b5b602002602001015160600151604051602001610f54959493929190613621565b60405160208183030381529060405280519060200120828281518110610f7d57610f7c612f61565b5b6020026020010181815250508080610f949061342a565b915050610e9a565b5061101c604051602001610faf90613789565b60405160208183030381529060405280519060200120858784604051602001610fd89190613861565b604051602081830303815290604052805190602001206040516020016110019493929190613878565b6040516020818303038152906040528051906020012061143d565b9150509392505050565b60008060019054906101000a900460ff161590508080156110575750600160008054906101000a900460ff1660ff16105b806110845750611066306115a2565b1580156110835750600160008054906101000a900460ff1660ff16145b5b6110c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ba9061392f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611100576001600060016101000a81548160ff0219169083151502179055505b61110a83836115c5565b61111586868661164c565b801561116e5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516111659190613997565b60405180910390a15b505050505050565b60395481565b603a5481565b603860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603d60205280600052604060002060009150905080546111c790612fbf565b80601f01602080910402602001604051908101604052809291908181526020018280546111f390612fbf565b80156112405780601f1061121557610100808354040283529160200191611240565b820191906000526020600020905b81548152906001019060200180831161122357829003601f168201915b505050505081565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6112dd603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118f19092919063ffffffff16565b611353603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661130b6103c4565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118f19092919063ffffffff16565b603860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166352942373603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016113d0919061204d565b600060405180830381600087803b1580156113ea57600080fd5b505af11580156113fe573d6000803e3d6000fd5b50505050603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600061145061144a611977565b83611986565b9050919050565b600080600061146685856119c7565b9150915061147381611a18565b819250505092915050565b60606003805461148d90612fbf565b80601f01602080910402602001604051908101604052809291908181526020018280546114b990612fbf565b80156115065780601f106114db57610100808354040283529160200191611506565b820191906000526020600020905b8154815290600101906020018083116114e957829003601f168201915b5050505050905090565b60606004805461151f90612fbf565b80601f016020809104026020016040519081016040528092919081815260200182805461154b90612fbf565b80156115985780601f1061156d57610100808354040283529160200191611598565b820191906000526020600020905b81548152906001019060200180831161157b57829003601f168201915b5050505050905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b90613a24565b60405180910390fd5b81600390816116239190613a9f565b5080600490816116339190613a9f565b506000801b6001819055506000801b6002819055505050565b600060019054906101000a900460ff1661169b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169290613a24565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361170a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170190613be3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177090613c75565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117df90613d07565b60405180910390fd5b82603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033603860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6119728363a9059cbb60e01b8484604051602401611910929190613d27565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611b7e565b505050565b6000611981611c46565b905090565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b6000806041835103611a085760008060006020860151925060408601519150606086015160001a90506119fc87828585611caa565b94509450505050611a11565b60006002915091505b9250929050565b60006004811115611a2c57611a2b613d50565b5b816004811115611a3f57611a3e613d50565b5b0315611b7b5760016004811115611a5957611a58613d50565b5b816004811115611a6c57611a6b613d50565b5b03611aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa390613dcb565b60405180910390fd5b60026004811115611ac057611abf613d50565b5b816004811115611ad357611ad2613d50565b5b03611b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0a90613e37565b60405180910390fd5b60036004811115611b2757611b26613d50565b5b816004811115611b3a57611b39613d50565b5b03611b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7190613ec9565b60405180910390fd5b5b50565b6000611be0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d8c9092919063ffffffff16565b9050600081511480611c02575080806020019051810190611c019190613f21565b5b611c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3890613fc0565b60405180910390fd5b505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611c71611da4565b611c79611e0f565b4630604051602001611c8f959493929190613fe0565b60405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611ce5576000600391509150611d83565b600060018787878760405160008152602001604052604051611d0a9493929190614042565b6020604051602081039080840390855afa158015611d2c573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d7a57600060019250925050611d83565b80600092509250505b94509492505050565b6060611d9b8484600085611e7a565b90509392505050565b600080611daf61147e565b9050600081511115611dcb578080519060200120915050611e0c565b600060015490506000801b8114611de6578092505050611e0c565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470925050505b90565b600080611e1a611510565b9050600081511115611e36578080519060200120915050611e77565b600060025490506000801b8114611e51578092505050611e77565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470925050505b90565b606082471015611ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb6906140f9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ee89190613172565b60006040518083038185875af1925050503d8060008114611f25576040519150601f19603f3d011682016040523d82523d6000602084013e611f2a565b606091505b5091509150611f3b87838387611f47565b92505050949350505050565b60608315611fa9576000835103611fa157611f61856115a2565b611fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9790614165565b60405180910390fd5b5b829050611fb4565b611fb38383611fbc565b5b949350505050565b600082511115611fcf5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120039190614185565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120378261200c565b9050919050565b6120478161202c565b82525050565b6000602082019050612062600083018461203e565b92915050565b6000819050919050565b61207b81612068565b82525050565b60006020820190506120966000830184612072565b92915050565b6000604051905090565b600080fd5b600080fd5b6120b981612068565b81146120c457600080fd5b50565b6000813590506120d6816120b0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61212f826120e6565b810181811067ffffffffffffffff8211171561214e5761214d6120f7565b5b80604052505050565b600061216161209c565b905061216d8282612126565b919050565b600067ffffffffffffffff82111561218d5761218c6120f7565b5b612196826120e6565b9050602081019050919050565b82818337600083830152505050565b60006121c56121c084612172565b612157565b9050828152602081018484840111156121e1576121e06120e1565b5b6121ec8482856121a3565b509392505050565b600082601f830112612209576122086120dc565b5b81356122198482602086016121b2565b91505092915050565b60008060006060848603121561223b5761223a6120a6565b5b6000612249868287016120c7565b935050602084013567ffffffffffffffff81111561226a576122696120ab565b5b612276868287016121f4565b925050604084013567ffffffffffffffff811115612297576122966120ab565b5b6122a3868287016121f4565b9150509250925092565b600067ffffffffffffffff8211156122c8576122c76120f7565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b6122f6816122e3565b811461230157600080fd5b50565b600081359050612313816122ed565b92915050565b60006080828403121561232f5761232e6122de565b5b6123396080612157565b9050600061234984828501612304565b600083015250602061235d848285016120c7565b6020830152506040612371848285016120c7565b6040830152506060612385848285016120c7565b60608301525092915050565b60006123a461239f846122ad565b612157565b905080838252602082019050608084028301858111156123c7576123c66122d9565b5b835b818110156123f057806123dc8882612319565b8452602084019350506080810190506123c9565b5050509392505050565b600082601f83011261240f5761240e6120dc565b5b813561241f848260208601612391565b91505092915050565b600067ffffffffffffffff821115612443576124426120f7565b5b602082029050602081019050919050565b600061246761246284612428565b612157565b9050808382526020820190506020840283018581111561248a576124896122d9565b5b835b818110156124d157803567ffffffffffffffff8111156124af576124ae6120dc565b5b8086016124bc89826121f4565b8552602085019450505060208101905061248c565b5050509392505050565b600082601f8301126124f0576124ef6120dc565b5b8135612500848260208601612454565b91505092915050565b60008060008060008060c08789031215612526576125256120a6565b5b600061253489828a016120c7565b965050602061254589828a016120c7565b955050604087013567ffffffffffffffff811115612566576125656120ab565b5b61257289828a016123fa565b945050606087013567ffffffffffffffff811115612593576125926120ab565b5b61259f89828a016124db565b935050608087013567ffffffffffffffff8111156125c0576125bf6120ab565b5b6125cc89828a016121f4565b92505060a087013567ffffffffffffffff8111156125ed576125ec6120ab565b5b6125f989828a016121f4565b9150509295509295509295565b60006020828403121561261c5761261b6120a6565b5b600082013567ffffffffffffffff81111561263a576126396120ab565b5b612646848285016121f4565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6126848161264f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126c45780820151818401526020810190506126a9565b60008484015250505050565b60006126db8261268a565b6126e58185612695565b93506126f58185602086016126a6565b6126fe816120e6565b840191505092915050565b612712816122e3565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61274d81612068565b82525050565b600061275f8383612744565b60208301905092915050565b6000602082019050919050565b600061278382612718565b61278d8185612723565b935061279883612734565b8060005b838110156127c95781516127b08882612753565b97506127bb8361276b565b92505060018101905061279c565b5085935050505092915050565b600060e0820190506127eb600083018a61267b565b81810360208301526127fd81896126d0565b9050818103604083015261281181886126d0565b90506128206060830187612072565b61282d608083018661203e565b61283a60a0830185612709565b81810360c083015261284c8184612778565b905098975050505050505050565b600080600060608486031215612873576128726120a6565b5b6000612881868287016120c7565b9350506020612892868287016120c7565b925050604084013567ffffffffffffffff8111156128b3576128b26120ab565b5b6128bf868287016123fa565b9150509250925092565b60006020820190506128de6000830184612709565b92915050565b60006128ef8261202c565b9050919050565b6128ff816128e4565b811461290a57600080fd5b50565b60008135905061291c816128f6565b92915050565b61292b8161202c565b811461293657600080fd5b50565b60008135905061294881612922565b92915050565b600067ffffffffffffffff821115612969576129686120f7565b5b612972826120e6565b9050602081019050919050565b600061299261298d8461294e565b612157565b9050828152602081018484840111156129ae576129ad6120e1565b5b6129b98482856121a3565b509392505050565b600082601f8301126129d6576129d56120dc565b5b81356129e684826020860161297f565b91505092915050565b600080600080600060a08688031215612a0b57612a0a6120a6565b5b6000612a198882890161290d565b9550506020612a2a88828901612939565b9450506040612a3b88828901612939565b935050606086013567ffffffffffffffff811115612a5c57612a5b6120ab565b5b612a68888289016129c1565b925050608086013567ffffffffffffffff811115612a8957612a886120ab565b5b612a95888289016129c1565b9150509295509295909350565b6000819050919050565b6000612ac7612ac2612abd8461200c565b612aa2565b61200c565b9050919050565b6000612ad982612aac565b9050919050565b6000612aeb82612ace565b9050919050565b612afb81612ae0565b82525050565b6000602082019050612b166000830184612af2565b92915050565b600060208284031215612b3257612b316120a6565b5b6000612b4084828501612304565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000612b7082612b49565b612b7a8185612b54565b9350612b8a8185602086016126a6565b612b93816120e6565b840191505092915050565b60006020820190508181036000830152612bb88184612b65565b905092915050565b6000612bcb82612ace565b9050919050565b612bdb81612bc0565b82525050565b6000602082019050612bf66000830184612bd2565b92915050565b7f4665654163636f756e743a206e6f20636c61696d000000000000000000000000600082015250565b6000612c32601483612695565b9150612c3d82612bfc565b602082019050919050565b60006020820190508181036000830152612c6181612c25565b9050919050565b7f4665654163636f756e743a20636c61696d206e6f742065787069726564000000600082015250565b6000612c9e601d83612695565b9150612ca982612c68565b602082019050919050565b60006020820190508181036000830152612ccd81612c91565b9050919050565b600081519050612ce3816120b0565b92915050565b600060208284031215612cff57612cfe6120a6565b5b6000612d0d84828501612cd4565b91505092915050565b6000604082019050612d2b6000830185612709565b612d386020830184612072565b9392505050565b7f4665654163636f756e743a20696e76616c69642066756e646572207369676e6160008201527f7475726500000000000000000000000000000000000000000000000000000000602082015250565b6000612d9b602483612695565b9150612da682612d3f565b604082019050919050565b60006020820190508181036000830152612dca81612d8e565b9050919050565b7f4665654163636f756e743a20696e76616c696420726563697069656e7420736960008201527f676e617475726500000000000000000000000000000000000000000000000000602082015250565b6000612e2d602783612695565b9150612e3882612dd1565b604082019050919050565b60006020820190508181036000830152612e5c81612e20565b9050919050565b7f4665654163636f756e743a20696e76616c696420696e70757400000000000000600082015250565b6000612e99601983612695565b9150612ea482612e63565b602082019050919050565b60006020820190508181036000830152612ec881612e8c565b9050919050565b7f4665654163636f756e743a207a65726f206e6f6e636520636c61696d2063616e60008201527f6e6f7420636f6e7461696e2068746c6373000000000000000000000000000000602082015250565b6000612f2b603183612695565b9150612f3682612ecf565b604082019050919050565b60006020820190508181036000830152612f5a81612f1e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612fd757607f821691505b602082108103612fea57612fe9612f90565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461301d81612fbf565b6130278186612ff0565b9450600182166000811461304257600181146130575761308a565b60ff198316865281151582028601935061308a565b61306085612ffb565b60005b8381101561308257815481890152600182019150602081019050613063565b838801955050505b50505092915050565b600061309f8284613010565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130e482612068565b91506130ef83612068565b9250828201905080821115613107576131066130aa565b5b92915050565b600061311882612068565b915061312383612068565b925082820390508181111561313b5761313a6130aa565b5b92915050565b600061314c82612b49565b6131568185612ff0565b93506131668185602086016126a6565b80840191505092915050565b600061317e8284613141565b915081905092915050565b600081519050613198816122ed565b92915050565b6000602082840312156131b4576131b36120a6565b5b60006131c284828501613189565b91505092915050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026132187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131db565b61322286836131db565b95508019841693508086168417925050509392505050565b600061325561325061324b84612068565b612aa2565b612068565b9050919050565b6000819050919050565b61326f8361323a565b61328361327b8261325c565b8484546131e8565b825550505050565b600090565b61329861328b565b6132a3818484613266565b505050565b5b818110156132c7576132bc600082613290565b6001810190506132a9565b5050565b601f82111561330c576132dd81612ffb565b6132e6846131cb565b810160208510156132f5578190505b613309613301856131cb565b8301826132a8565b50505b505050565b600082821c905092915050565b600061332f60001984600802613311565b1980831691505092915050565b6000613348838361331e565b9150826002028217905092915050565b61336182612b49565b67ffffffffffffffff81111561337a576133796120f7565b5b6133848254612fbf565b61338f8282856132cb565b600060209050601f8311600181146133c257600084156133b0578287015190505b6133ba858261333c565b865550613422565b601f1984166133d086612ffb565b60005b828110156133f8578489015182556001820191506020850194506020810190506133d3565b868310156134155784890151613411601f89168261331e565b8355505b6001600288020188555050505b505050505050565b600061343582612068565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613467576134666130aa565b5b600182019050919050565b7f4665654163636f756e743a20696e76616c696420616d6f756e74000000000000600082015250565b60006134a8601a83612695565b91506134b382613472565b602082019050919050565b600060208201905081810360008301526134d78161349b565b9050919050565b7f4665654163636f756e743a206f7665727269646520636f6e646974696f6e732060008201527f6e6f74206d657400000000000000000000000000000000000000000000000000602082015250565b600061353a602783612695565b9150613545826134de565b604082019050919050565b600060208201905081810360008301526135698161352d565b9050919050565b6000608082019050613585600083018761203e565b6135926020830186612072565b61359f6040830185612072565b6135ac6060830184612072565b95945050505050565b7f4549503731323a20556e696e697469616c697a65640000000000000000000000600082015250565b60006135eb601583612695565b91506135f6826135b5565b602082019050919050565b6000602082019050818103600083015261361a816135de565b9050919050565b600060a0820190506136366000830188612709565b6136436020830187612709565b6136506040830186612072565b61365d6060830185612072565b61366a6080830184612072565b9695505050505050565b600081905092915050565b7f436c61696d2875696e74323536206e6f6e63652c75696e7432353620616d6f7560008201527f6e742c48544c435b5d2068746c63732900000000000000000000000000000000602082015250565b60006136db603083613674565b91506136e68261367f565b603082019050919050565b7f48544c43286279746573333220736563726574486173682c75696e743235362060008201527f6578706972792c75696e743235362073656e64416d6f756e742c75696e74323560208201527f362072656369657665416d6f756e742900000000000000000000000000000000604082015250565b6000613773605083613674565b915061377e826136f1565b605082019050919050565b6000613794826136ce565b915061379f82613766565b9150819050919050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b6137d8816122e3565b82525050565b60006137ea83836137cf565b60208301905092915050565b6000602082019050919050565b600061380e826137a9565b61381881856137b4565b9350613823836137bf565b8060005b8381101561385457815161383b88826137de565b9750613846836137f6565b925050600181019050613827565b5085935050505092915050565b600061386d8284613803565b915081905092915050565b600060808201905061388d6000830187612709565b61389a6020830186612072565b6138a76040830185612072565b6138b46060830184612709565b95945050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613919602e83612695565b9150613924826138bd565b604082019050919050565b600060208201905081810360008301526139488161390c565b9050919050565b6000819050919050565b600060ff82169050919050565b600061398161397c6139778461394f565b612aa2565b613959565b9050919050565b61399181613966565b82525050565b60006020820190506139ac6000830184613988565b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613a0e602b83612695565b9150613a19826139b2565b604082019050919050565b60006020820190508181036000830152613a3d81613a01565b9050919050565b60008190508160005260206000209050919050565b601f821115613a9a57613a6b81613a44565b613a74846131cb565b81016020851015613a83578190505b613a97613a8f856131cb565b8301826132a8565b50505b505050565b613aa88261268a565b67ffffffffffffffff811115613ac157613ac06120f7565b5b613acb8254612fbf565b613ad6828285613a59565b600060209050601f831160018114613b095760008415613af7578287015190505b613b01858261333c565b865550613b69565b601f198416613b1786613a44565b60005b82811015613b3f57848901518255600182019150602085019450602081019050613b1a565b86831015613b5c5784890151613b58601f89168261331e565b8355505b6001600288020188555050505b505050505050565b7f4665654163636f756e743a20746f6b656e206973207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613bcd602183612695565b9150613bd882613b71565b604082019050919050565b60006020820190508181036000830152613bfc81613bc0565b9050919050565b7f4665654163636f756e743a2066756e646572206973207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c5f602283612695565b9150613c6a82613c03565b604082019050919050565b60006020820190508181036000830152613c8e81613c52565b9050919050565b7f4665654163636f756e743a20726563697069656e74206973207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613cf1602583612695565b9150613cfc82613c95565b604082019050919050565b60006020820190508181036000830152613d2081613ce4565b9050919050565b6000604082019050613d3c600083018561203e565b613d496020830184612072565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613db5601883612695565b9150613dc082613d7f565b602082019050919050565b60006020820190508181036000830152613de481613da8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613e21601f83612695565b9150613e2c82613deb565b602082019050919050565b60006020820190508181036000830152613e5081613e14565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613eb3602283612695565b9150613ebe82613e57565b604082019050919050565b60006020820190508181036000830152613ee281613ea6565b9050919050565b60008115159050919050565b613efe81613ee9565b8114613f0957600080fd5b50565b600081519050613f1b81613ef5565b92915050565b600060208284031215613f3757613f366120a6565b5b6000613f4584828501613f0c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613faa602a83612695565b9150613fb582613f4e565b604082019050919050565b60006020820190508181036000830152613fd981613f9d565b9050919050565b600060a082019050613ff56000830188612709565b6140026020830187612709565b61400f6040830186612709565b61401c6060830185612072565b614029608083018461203e565b9695505050505050565b61403c81613959565b82525050565b60006080820190506140576000830187612709565b6140646020830186614033565b6140716040830185612709565b61407e6060830184612709565b95945050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006140e3602683612695565b91506140ee82614087565b604082019050919050565b60006020820190508181036000830152614112816140d6565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061414f601d83612695565b915061415a82614119565b602082019050919050565b6000602082019050818103600083015261417e81614142565b9050919050565b6000602082019050818103600083015261419f81846126d0565b90509291505056fea2646970667358221220eaad74e7a49c4bef11a619c5516ba83400493e79ed7b6ddf935a53ca6000248264736f6c63430008120033",
}

// GardenFEEAccountABI is the input ABI used to generate the binding from.
// Deprecated: Use GardenFEEAccountMetaData.ABI instead.
var GardenFEEAccountABI = GardenFEEAccountMetaData.ABI

// GardenFEEAccountBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GardenFEEAccountMetaData.Bin instead.
var GardenFEEAccountBin = GardenFEEAccountMetaData.Bin

// DeployGardenFEEAccount deploys a new Ethereum contract, binding an instance of GardenFEEAccount to it.
func DeployGardenFEEAccount(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *GardenFEEAccount, error) {
	parsed, err := GardenFEEAccountMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GardenFEEAccountBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GardenFEEAccount{GardenFEEAccountCaller: GardenFEEAccountCaller{contract: contract}, GardenFEEAccountTransactor: GardenFEEAccountTransactor{contract: contract}, GardenFEEAccountFilterer: GardenFEEAccountFilterer{contract: contract}}, nil
}

// GardenFEEAccount is an auto generated Go binding around an Ethereum contract.
type GardenFEEAccount struct {
	GardenFEEAccountCaller     // Read-only binding to the contract
	GardenFEEAccountTransactor // Write-only binding to the contract
	GardenFEEAccountFilterer   // Log filterer for contract events
}

// GardenFEEAccountCaller is an auto generated read-only Go binding around an Ethereum contract.
type GardenFEEAccountCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GardenFEEAccountTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GardenFEEAccountTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GardenFEEAccountFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GardenFEEAccountFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GardenFEEAccountSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GardenFEEAccountSession struct {
	Contract     *GardenFEEAccount // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GardenFEEAccountCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GardenFEEAccountCallerSession struct {
	Contract *GardenFEEAccountCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// GardenFEEAccountTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GardenFEEAccountTransactorSession struct {
	Contract     *GardenFEEAccountTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// GardenFEEAccountRaw is an auto generated low-level Go binding around an Ethereum contract.
type GardenFEEAccountRaw struct {
	Contract *GardenFEEAccount // Generic contract binding to access the raw methods on
}

// GardenFEEAccountCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GardenFEEAccountCallerRaw struct {
	Contract *GardenFEEAccountCaller // Generic read-only contract binding to access the raw methods on
}

// GardenFEEAccountTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GardenFEEAccountTransactorRaw struct {
	Contract *GardenFEEAccountTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGardenFEEAccount creates a new instance of GardenFEEAccount, bound to a specific deployed contract.
func NewGardenFEEAccount(address common.Address, backend bind.ContractBackend) (*GardenFEEAccount, error) {
	contract, err := bindGardenFEEAccount(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GardenFEEAccount{GardenFEEAccountCaller: GardenFEEAccountCaller{contract: contract}, GardenFEEAccountTransactor: GardenFEEAccountTransactor{contract: contract}, GardenFEEAccountFilterer: GardenFEEAccountFilterer{contract: contract}}, nil
}

// NewGardenFEEAccountCaller creates a new read-only instance of GardenFEEAccount, bound to a specific deployed contract.
func NewGardenFEEAccountCaller(address common.Address, caller bind.ContractCaller) (*GardenFEEAccountCaller, error) {
	contract, err := bindGardenFEEAccount(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GardenFEEAccountCaller{contract: contract}, nil
}

// NewGardenFEEAccountTransactor creates a new write-only instance of GardenFEEAccount, bound to a specific deployed contract.
func NewGardenFEEAccountTransactor(address common.Address, transactor bind.ContractTransactor) (*GardenFEEAccountTransactor, error) {
	contract, err := bindGardenFEEAccount(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GardenFEEAccountTransactor{contract: contract}, nil
}

// NewGardenFEEAccountFilterer creates a new log filterer instance of GardenFEEAccount, bound to a specific deployed contract.
func NewGardenFEEAccountFilterer(address common.Address, filterer bind.ContractFilterer) (*GardenFEEAccountFilterer, error) {
	contract, err := bindGardenFEEAccount(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GardenFEEAccountFilterer{contract: contract}, nil
}

// bindGardenFEEAccount binds a generic wrapper to an already deployed contract.
func bindGardenFEEAccount(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GardenFEEAccountMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GardenFEEAccount *GardenFEEAccountRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GardenFEEAccount.Contract.GardenFEEAccountCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GardenFEEAccount *GardenFEEAccountRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.GardenFEEAccountTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GardenFEEAccount *GardenFEEAccountRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.GardenFEEAccountTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GardenFEEAccount *GardenFEEAccountCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GardenFEEAccount.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GardenFEEAccount *GardenFEEAccountTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GardenFEEAccount *GardenFEEAccountTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.contract.Transact(opts, method, params...)
}

// Amount is a free data retrieval call binding the contract method 0xaa8c217c.
//
// Solidity: function amount() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCaller) Amount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "amount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Amount is a free data retrieval call binding the contract method 0xaa8c217c.
//
// Solidity: function amount() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountSession) Amount() (*big.Int, error) {
	return _GardenFEEAccount.Contract.Amount(&_GardenFEEAccount.CallOpts)
}

// Amount is a free data retrieval call binding the contract method 0xaa8c217c.
//
// Solidity: function amount() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Amount() (*big.Int, error) {
	return _GardenFEEAccount.Contract.Amount(&_GardenFEEAccount.CallOpts)
}

// ClaimHash is a free data retrieval call binding the contract method 0x9044ef10.
//
// Solidity: function claimHash(uint256 amount_, uint256 nonce_, (bytes32,uint256,uint256,uint256)[] htlcs) view returns(bytes32)
func (_GardenFEEAccount *GardenFEEAccountCaller) ClaimHash(opts *bind.CallOpts, amount_ *big.Int, nonce_ *big.Int, htlcs []FeeAccountHTLC) ([32]byte, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "claimHash", amount_, nonce_, htlcs)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ClaimHash is a free data retrieval call binding the contract method 0x9044ef10.
//
// Solidity: function claimHash(uint256 amount_, uint256 nonce_, (bytes32,uint256,uint256,uint256)[] htlcs) view returns(bytes32)
func (_GardenFEEAccount *GardenFEEAccountSession) ClaimHash(amount_ *big.Int, nonce_ *big.Int, htlcs []FeeAccountHTLC) ([32]byte, error) {
	return _GardenFEEAccount.Contract.ClaimHash(&_GardenFEEAccount.CallOpts, amount_, nonce_, htlcs)
}

// ClaimHash is a free data retrieval call binding the contract method 0x9044ef10.
//
// Solidity: function claimHash(uint256 amount_, uint256 nonce_, (bytes32,uint256,uint256,uint256)[] htlcs) view returns(bytes32)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) ClaimHash(amount_ *big.Int, nonce_ *big.Int, htlcs []FeeAccountHTLC) ([32]byte, error) {
	return _GardenFEEAccount.Contract.ClaimHash(&_GardenFEEAccount.CallOpts, amount_, nonce_, htlcs)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GardenFEEAccount *GardenFEEAccountCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GardenFEEAccount *GardenFEEAccountSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _GardenFEEAccount.Contract.Eip712Domain(&_GardenFEEAccount.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _GardenFEEAccount.Contract.Eip712Domain(&_GardenFEEAccount.CallOpts)
}

// Expiration is a free data retrieval call binding the contract method 0x4665096d.
//
// Solidity: function expiration() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCaller) Expiration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "expiration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Expiration is a free data retrieval call binding the contract method 0x4665096d.
//
// Solidity: function expiration() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountSession) Expiration() (*big.Int, error) {
	return _GardenFEEAccount.Contract.Expiration(&_GardenFEEAccount.CallOpts)
}

// Expiration is a free data retrieval call binding the contract method 0x4665096d.
//
// Solidity: function expiration() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Expiration() (*big.Int, error) {
	return _GardenFEEAccount.Contract.Expiration(&_GardenFEEAccount.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountSession) Factory() (common.Address, error) {
	return _GardenFEEAccount.Contract.Factory(&_GardenFEEAccount.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Factory() (common.Address, error) {
	return _GardenFEEAccount.Contract.Factory(&_GardenFEEAccount.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCaller) Funder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "funder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountSession) Funder() (common.Address, error) {
	return _GardenFEEAccount.Contract.Funder(&_GardenFEEAccount.CallOpts)
}

// Funder is a free data retrieval call binding the contract method 0x041ae880.
//
// Solidity: function funder() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Funder() (common.Address, error) {
	return _GardenFEEAccount.Contract.Funder(&_GardenFEEAccount.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountSession) Nonce() (*big.Int, error) {
	return _GardenFEEAccount.Contract.Nonce(&_GardenFEEAccount.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Nonce() (*big.Int, error) {
	return _GardenFEEAccount.Contract.Nonce(&_GardenFEEAccount.CallOpts)
}

// Recipient is a free data retrieval call binding the contract method 0x66d003ac.
//
// Solidity: function recipient() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCaller) Recipient(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "recipient")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Recipient is a free data retrieval call binding the contract method 0x66d003ac.
//
// Solidity: function recipient() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountSession) Recipient() (common.Address, error) {
	return _GardenFEEAccount.Contract.Recipient(&_GardenFEEAccount.CallOpts)
}

// Recipient is a free data retrieval call binding the contract method 0x66d003ac.
//
// Solidity: function recipient() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Recipient() (common.Address, error) {
	return _GardenFEEAccount.Contract.Recipient(&_GardenFEEAccount.CallOpts)
}

// Secrets is a free data retrieval call binding the contract method 0xef74e594.
//
// Solidity: function secrets(bytes32 ) view returns(bytes)
func (_GardenFEEAccount *GardenFEEAccountCaller) Secrets(opts *bind.CallOpts, arg0 [32]byte) ([]byte, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "secrets", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Secrets is a free data retrieval call binding the contract method 0xef74e594.
//
// Solidity: function secrets(bytes32 ) view returns(bytes)
func (_GardenFEEAccount *GardenFEEAccountSession) Secrets(arg0 [32]byte) ([]byte, error) {
	return _GardenFEEAccount.Contract.Secrets(&_GardenFEEAccount.CallOpts, arg0)
}

// Secrets is a free data retrieval call binding the contract method 0xef74e594.
//
// Solidity: function secrets(bytes32 ) view returns(bytes)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Secrets(arg0 [32]byte) ([]byte, error) {
	return _GardenFEEAccount.Contract.Secrets(&_GardenFEEAccount.CallOpts, arg0)
}

// SecretsClaimed is a free data retrieval call binding the contract method 0x7f713261.
//
// Solidity: function secretsClaimed(bytes ) view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCaller) SecretsClaimed(opts *bind.CallOpts, arg0 []byte) (*big.Int, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "secretsClaimed", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SecretsClaimed is a free data retrieval call binding the contract method 0x7f713261.
//
// Solidity: function secretsClaimed(bytes ) view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountSession) SecretsClaimed(arg0 []byte) (*big.Int, error) {
	return _GardenFEEAccount.Contract.SecretsClaimed(&_GardenFEEAccount.CallOpts, arg0)
}

// SecretsClaimed is a free data retrieval call binding the contract method 0x7f713261.
//
// Solidity: function secretsClaimed(bytes ) view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) SecretsClaimed(arg0 []byte) (*big.Int, error) {
	return _GardenFEEAccount.Contract.SecretsClaimed(&_GardenFEEAccount.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountSession) Token() (common.Address, error) {
	return _GardenFEEAccount.Contract.Token(&_GardenFEEAccount.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) Token() (common.Address, error) {
	return _GardenFEEAccount.Contract.Token(&_GardenFEEAccount.CallOpts)
}

// TotalAmount is a free data retrieval call binding the contract method 0x1a39d8ef.
//
// Solidity: function totalAmount() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCaller) TotalAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _GardenFEEAccount.contract.Call(opts, &out, "totalAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAmount is a free data retrieval call binding the contract method 0x1a39d8ef.
//
// Solidity: function totalAmount() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountSession) TotalAmount() (*big.Int, error) {
	return _GardenFEEAccount.Contract.TotalAmount(&_GardenFEEAccount.CallOpts)
}

// TotalAmount is a free data retrieval call binding the contract method 0x1a39d8ef.
//
// Solidity: function totalAmount() view returns(uint256)
func (_GardenFEEAccount *GardenFEEAccountCallerSession) TotalAmount() (*big.Int, error) {
	return _GardenFEEAccount.Contract.TotalAmount(&_GardenFEEAccount.CallOpts)
}

// FeeAccountInit is a paid mutator transaction binding the contract method 0x954cb649.
//
// Solidity: function __FeeAccount_init(address token_, address funder_, address recipient_, string feeAccountName, string feeAccountVersion) returns()
func (_GardenFEEAccount *GardenFEEAccountTransactor) FeeAccountInit(opts *bind.TransactOpts, token_ common.Address, funder_ common.Address, recipient_ common.Address, feeAccountName string, feeAccountVersion string) (*types.Transaction, error) {
	return _GardenFEEAccount.contract.Transact(opts, "__FeeAccount_init", token_, funder_, recipient_, feeAccountName, feeAccountVersion)
}

// FeeAccountInit is a paid mutator transaction binding the contract method 0x954cb649.
//
// Solidity: function __FeeAccount_init(address token_, address funder_, address recipient_, string feeAccountName, string feeAccountVersion) returns()
func (_GardenFEEAccount *GardenFEEAccountSession) FeeAccountInit(token_ common.Address, funder_ common.Address, recipient_ common.Address, feeAccountName string, feeAccountVersion string) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.FeeAccountInit(&_GardenFEEAccount.TransactOpts, token_, funder_, recipient_, feeAccountName, feeAccountVersion)
}

// FeeAccountInit is a paid mutator transaction binding the contract method 0x954cb649.
//
// Solidity: function __FeeAccount_init(address token_, address funder_, address recipient_, string feeAccountName, string feeAccountVersion) returns()
func (_GardenFEEAccount *GardenFEEAccountTransactorSession) FeeAccountInit(token_ common.Address, funder_ common.Address, recipient_ common.Address, feeAccountName string, feeAccountVersion string) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.FeeAccountInit(&_GardenFEEAccount.TransactOpts, token_, funder_, recipient_, feeAccountName, feeAccountVersion)
}

// Claim is a paid mutator transaction binding the contract method 0x74cb7eaf.
//
// Solidity: function claim(uint256 amount_, uint256 nonce_, (bytes32,uint256,uint256,uint256)[] htlcs, bytes[] secrets_, bytes funderSig, bytes recipientSig) returns()
func (_GardenFEEAccount *GardenFEEAccountTransactor) Claim(opts *bind.TransactOpts, amount_ *big.Int, nonce_ *big.Int, htlcs []FeeAccountHTLC, secrets_ [][]byte, funderSig []byte, recipientSig []byte) (*types.Transaction, error) {
	return _GardenFEEAccount.contract.Transact(opts, "claim", amount_, nonce_, htlcs, secrets_, funderSig, recipientSig)
}

// Claim is a paid mutator transaction binding the contract method 0x74cb7eaf.
//
// Solidity: function claim(uint256 amount_, uint256 nonce_, (bytes32,uint256,uint256,uint256)[] htlcs, bytes[] secrets_, bytes funderSig, bytes recipientSig) returns()
func (_GardenFEEAccount *GardenFEEAccountSession) Claim(amount_ *big.Int, nonce_ *big.Int, htlcs []FeeAccountHTLC, secrets_ [][]byte, funderSig []byte, recipientSig []byte) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.Claim(&_GardenFEEAccount.TransactOpts, amount_, nonce_, htlcs, secrets_, funderSig, recipientSig)
}

// Claim is a paid mutator transaction binding the contract method 0x74cb7eaf.
//
// Solidity: function claim(uint256 amount_, uint256 nonce_, (bytes32,uint256,uint256,uint256)[] htlcs, bytes[] secrets_, bytes funderSig, bytes recipientSig) returns()
func (_GardenFEEAccount *GardenFEEAccountTransactorSession) Claim(amount_ *big.Int, nonce_ *big.Int, htlcs []FeeAccountHTLC, secrets_ [][]byte, funderSig []byte, recipientSig []byte) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.Claim(&_GardenFEEAccount.TransactOpts, amount_, nonce_, htlcs, secrets_, funderSig, recipientSig)
}

// Close is a paid mutator transaction binding the contract method 0x44275289.
//
// Solidity: function close(uint256 amount_, bytes funderSig, bytes recipientSig) returns()
func (_GardenFEEAccount *GardenFEEAccountTransactor) Close(opts *bind.TransactOpts, amount_ *big.Int, funderSig []byte, recipientSig []byte) (*types.Transaction, error) {
	return _GardenFEEAccount.contract.Transact(opts, "close", amount_, funderSig, recipientSig)
}

// Close is a paid mutator transaction binding the contract method 0x44275289.
//
// Solidity: function close(uint256 amount_, bytes funderSig, bytes recipientSig) returns()
func (_GardenFEEAccount *GardenFEEAccountSession) Close(amount_ *big.Int, funderSig []byte, recipientSig []byte) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.Close(&_GardenFEEAccount.TransactOpts, amount_, funderSig, recipientSig)
}

// Close is a paid mutator transaction binding the contract method 0x44275289.
//
// Solidity: function close(uint256 amount_, bytes funderSig, bytes recipientSig) returns()
func (_GardenFEEAccount *GardenFEEAccountTransactorSession) Close(amount_ *big.Int, funderSig []byte, recipientSig []byte) (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.Close(&_GardenFEEAccount.TransactOpts, amount_, funderSig, recipientSig)
}

// Settle is a paid mutator transaction binding the contract method 0x11da60b4.
//
// Solidity: function settle() returns()
func (_GardenFEEAccount *GardenFEEAccountTransactor) Settle(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GardenFEEAccount.contract.Transact(opts, "settle")
}

// Settle is a paid mutator transaction binding the contract method 0x11da60b4.
//
// Solidity: function settle() returns()
func (_GardenFEEAccount *GardenFEEAccountSession) Settle() (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.Settle(&_GardenFEEAccount.TransactOpts)
}

// Settle is a paid mutator transaction binding the contract method 0x11da60b4.
//
// Solidity: function settle() returns()
func (_GardenFEEAccount *GardenFEEAccountTransactorSession) Settle() (*types.Transaction, error) {
	return _GardenFEEAccount.Contract.Settle(&_GardenFEEAccount.TransactOpts)
}

// GardenFEEAccountEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the GardenFEEAccount contract.
type GardenFEEAccountEIP712DomainChangedIterator struct {
	Event *GardenFEEAccountEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GardenFEEAccountEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GardenFEEAccountEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GardenFEEAccountEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GardenFEEAccountEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GardenFEEAccountEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GardenFEEAccountEIP712DomainChanged represents a EIP712DomainChanged event raised by the GardenFEEAccount contract.
type GardenFEEAccountEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GardenFEEAccount *GardenFEEAccountFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*GardenFEEAccountEIP712DomainChangedIterator, error) {

	logs, sub, err := _GardenFEEAccount.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &GardenFEEAccountEIP712DomainChangedIterator{contract: _GardenFEEAccount.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GardenFEEAccount *GardenFEEAccountFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *GardenFEEAccountEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _GardenFEEAccount.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GardenFEEAccountEIP712DomainChanged)
				if err := _GardenFEEAccount.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GardenFEEAccount *GardenFEEAccountFilterer) ParseEIP712DomainChanged(log types.Log) (*GardenFEEAccountEIP712DomainChanged, error) {
	event := new(GardenFEEAccountEIP712DomainChanged)
	if err := _GardenFEEAccount.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GardenFEEAccountInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the GardenFEEAccount contract.
type GardenFEEAccountInitializedIterator struct {
	Event *GardenFEEAccountInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GardenFEEAccountInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GardenFEEAccountInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GardenFEEAccountInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GardenFEEAccountInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GardenFEEAccountInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GardenFEEAccountInitialized represents a Initialized event raised by the GardenFEEAccount contract.
type GardenFEEAccountInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_GardenFEEAccount *GardenFEEAccountFilterer) FilterInitialized(opts *bind.FilterOpts) (*GardenFEEAccountInitializedIterator, error) {

	logs, sub, err := _GardenFEEAccount.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &GardenFEEAccountInitializedIterator{contract: _GardenFEEAccount.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_GardenFEEAccount *GardenFEEAccountFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *GardenFEEAccountInitialized) (event.Subscription, error) {

	logs, sub, err := _GardenFEEAccount.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GardenFEEAccountInitialized)
				if err := _GardenFEEAccount.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_GardenFEEAccount *GardenFEEAccountFilterer) ParseInitialized(log types.Log) (*GardenFEEAccountInitialized, error) {
	event := new(GardenFEEAccountInitialized)
	if err := _GardenFEEAccount.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
