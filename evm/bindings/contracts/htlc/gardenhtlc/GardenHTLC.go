// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gardenhtlc

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// GardenHTLCMetaData contains all meta data concerning the GardenHTLC contract.
var GardenHTLCMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Initiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"secret\",\"type\":\"bytes\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"initiateWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"instantRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initiatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"secret\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101806040523480156200001257600080fd5b5060405162003bb638038062003bb683398181016040528101906200003891906200045b565b8181620000556000836200013260201b62000d851790919060201c565b6101208181525050620000786001826200013260201b62000d851790919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a08181525050620000b76200018f60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050508273ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff1681525050505050620009d9565b600060208351101562000158576200015083620001ec60201b60201c565b905062000189565b826200016f836200025960201b62000dc91760201c565b600001908162000180919062000740565b5060ff60001b90505b92915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e051610100514630604051602001620001d195949392919062000864565b60405160208183030381529060405280519060200120905090565b600080829050601f815111156200023c57826040517f305a27a900000000000000000000000000000000000000000000000000000000815260040162000233919062000913565b60405180910390fd5b8051816200024a9062000969565b60001c1760001b915050919050565b6000819050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002a48262000277565b9050919050565b620002b68162000297565b8114620002c257600080fd5b50565b600081519050620002d681620002ab565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200033182620002e6565b810181811067ffffffffffffffff82111715620003535762000352620002f7565b5b80604052505050565b60006200036862000263565b905062000376828262000326565b919050565b600067ffffffffffffffff821115620003995762000398620002f7565b5b620003a482620002e6565b9050602081019050919050565b60005b83811015620003d1578082015181840152602081019050620003b4565b60008484015250505050565b6000620003f4620003ee846200037b565b6200035c565b905082815260208101848484011115620004135762000412620002e1565b5b62000420848285620003b1565b509392505050565b600082601f83011262000440576200043f620002dc565b5b815162000452848260208601620003dd565b91505092915050565b6000806000606084860312156200047757620004766200026d565b5b60006200048786828701620002c5565b935050602084015167ffffffffffffffff811115620004ab57620004aa62000272565b5b620004b98682870162000428565b925050604084015167ffffffffffffffff811115620004dd57620004dc62000272565b5b620004eb8682870162000428565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054857607f821691505b6020821081036200055e576200055d62000500565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000589565b620005d4868362000589565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006216200061b6200061584620005ec565b620005f6565b620005ec565b9050919050565b6000819050919050565b6200063d8362000600565b620006556200064c8262000628565b84845462000596565b825550505050565b600090565b6200066c6200065d565b6200067981848462000632565b505050565b5b81811015620006a1576200069560008262000662565b6001810190506200067f565b5050565b601f821115620006f057620006ba8162000564565b620006c58462000579565b81016020851015620006d5578190505b620006ed620006e48562000579565b8301826200067e565b50505b505050565b600082821c905092915050565b60006200071560001984600802620006f5565b1980831691505092915050565b600062000730838362000702565b9150826002028217905092915050565b6200074b82620004f5565b67ffffffffffffffff811115620007675762000766620002f7565b5b6200077382546200052f565b62000780828285620006a5565b600060209050601f831160018114620007b85760008415620007a3578287015190505b620007af858262000722565b8655506200081f565b601f198416620007c88662000564565b60005b82811015620007f257848901518255600182019150602085019450602081019050620007cb565b868310156200081257848901516200080e601f89168262000702565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b6200083c8162000827565b82525050565b6200084d81620005ec565b82525050565b6200085e8162000297565b82525050565b600060a0820190506200087b600083018862000831565b6200088a602083018762000831565b62000899604083018662000831565b620008a8606083018562000842565b620008b7608083018462000853565b9695505050505050565b600082825260208201905092915050565b6000620008df82620004f5565b620008eb8185620008c1565b9350620008fd818560208601620003b1565b6200090881620002e6565b840191505092915050565b600060208201905081810360008301526200092f8184620008d2565b905092915050565b600081519050919050565b6000819050602082019050919050565b600062000960825162000827565b80915050919050565b6000620009768262000937565b82620009828462000942565b90506200098f8162000952565b92506020821015620009d257620009cd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080262000589565b831692505b5050919050565b60805160a05160c05160e0516101005161012051610140516101605161315b62000a5b6000396000818161035a01528181610a1c01528181610d1601528181610d6301526112a7015260006105ab01526000610577015260006118e0015260006118bf015260006114da0152600061153001526000611559015261315b6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639c3f1e901161005b5780639c3f1e9014610105578063edaf5fac1461013a578063f7ff720714610156578063fc0c546a1461017257610088565b80637249fbb61461008d5780637929d59d146100a957806384b0196e146100c557806397ffc7ae146100e9575b600080fd5b6100a760048036038101906100a29190611c57565b610190565b005b6100c360048036038101906100be9190611d7d565b6103a2565b005b6100cd610564565b6040516100e09796959493929190611fcd565b60405180910390f35b61010360048036038101906100fe9190612051565b610666565b005b61011f600480360381019061011a9190611c57565b610774565b604051610131969594939291906120d3565b60405180910390f35b610154600480360381019061014f9190612134565b6107fd565b005b610170600480360381019061016b9190612134565b610a67565b005b61017a610d61565b60405161018791906121f3565b60405180910390f35b6000600260008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361023a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102319061225a565b60405180910390fd5b8060000160009054906101000a900460ff161561028c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610283906122c6565b60405180910390fd5b43816003015482600201546102a19190612315565b106102e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d890612395565b60405180910390fd5b60018160000160006101000a81548160ff021916908315150217905550817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a261039e8160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600401547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dd39092919063ffffffff16565b5050565b858585600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610414576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040b90612401565b60405180910390fd5b60008211610457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044e9061246d565b60405180910390fd5b6000811161049a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610491906124d9565b60405180910390fd5b600061054986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061053b7fde5278e8c85ac4e57ea69f40f594c328916a0c846a6bbd82592e91cff5eee1368d8d8d8d6040516020016105209594939291906124f9565b60405160208183030381529060405280519060200120610e59565b610e7390919063ffffffff16565b9050610558818b8b8b8b610e9a565b50505050505050505050565b6000606080600080600060606105a460007f00000000000000000000000000000000000000000000000000000000000000006112f690919063ffffffff16565b6105d860017f00000000000000000000000000000000000000000000000000000000000000006112f690919063ffffffff16565b46306000801b600067ffffffffffffffff8111156105f9576105f861254c565b5b6040519080825280602002602001820160405280156106275781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b838383600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf90612401565b60405180910390fd5b6000821161071b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107129061246d565b60405180910390fd5b6000811161075e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610755906124d9565b60405180910390fd5b61076b3388888888610e9a565b50505050505050565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905086565b60006108a683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506108987f0e9893496d91576e89d810f2a1455a2d7ccd9e051d2fa03ea3c8636e9dc6aac28760405160200161087d92919061257b565b60405160208183030381529060405280519060200120610e59565b610e7390919063ffffffff16565b905060006002600086815260200190815260200160002090508173ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610951576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610948906125f0565b60405180910390fd5b8060000160009054906101000a900460ff16156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a906122c6565b60405180910390fd5b60018160000160006101000a81548160ff021916908315150217905550847ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a2610a608160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600401547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dd39092919063ffffffff16565b5050505050565b6000600260008581526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b089061225a565b60405180910390fd5b8060000160009054906101000a900460ff1615610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a906122c6565b60405180910390fd5b600060028484604051610b7792919061264f565b602060405180830381855afa158015610b94573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610bb7919061267d565b9050846002828460000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001610bf39291906126aa565b604051602081830303815290604052604051610c0f919061270f565b602060405180830381855afa158015610c2c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610c4f919061267d565b14610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690612772565b60405180910390fd5b60018260000160006101000a81548160ff02191690831515021790555080857f4c9a044220477b4e94dbb0d07ff6ff4ac30d443bef59098c4541b006954778e28686604051610cdf9291906127d0565b60405180910390a3610d5a8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600401547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dd39092919063ffffffff16565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000602083511015610da157610d9a836113a6565b9050610dc3565b82610dab83610dc9565b6000019081610dba91906129f6565b5060ff60001b90505b92915050565b6000819050919050565b610e548363a9059cbb60e01b8484604051602401610df2929190612ac8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061140e565b505050565b6000610e6c610e666114d6565b8361158d565b9050919050565b6000806000610e8285856115ce565b91509150610e8f8161161f565b819250505092915050565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610f08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eff90612b63565b60405180910390fd5b600060028287604051602001610f1f9291906126aa565b604051602081830303815290604052604051610f3b919061270f565b602060405180830381855afa158015610f58573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610f7b919061267d565b90506000600260008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16146110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee90612bcf565b60405180910390fd5b60006040518060c001604052806000151581526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001438152602001878152602001868152509050806002600085815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600201556080820151816003015560a0820151816004015590505083837f01b41cbd4bbcc3c5b968a04d3fbdd8c1648a39ff6d9a3929b4840cea1142bc6560026000878152602001908152602001600020600401546040516112819190612bef565b60405180910390a36112ec883060026000878152602001908152602001600020600401547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611785909392919063ffffffff16565b5050505050505050565b606060ff60001b83146113135761130c8361180e565b90506113a0565b81805461131f90612823565b80601f016020809104026020016040519081016040528092919081815260200182805461134b90612823565b80156113985780601f1061136d57610100808354040283529160200191611398565b820191906000526020600020905b81548152906001019060200180831161137b57829003601f168201915b505050505090505b92915050565b600080829050601f815111156113f357826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016113ea9190612c0a565b60405180910390fd5b8051816113ff90612c51565b60001c1760001b915050919050565b6000611470826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118829092919063ffffffff16565b90506000815114806114925750808060200190518101906114919190612ce4565b5b6114d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c890612d83565b60405180910390fd5b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561155257507f000000000000000000000000000000000000000000000000000000000000000046145b1561157f577f0000000000000000000000000000000000000000000000000000000000000000905061158a565b61158761189a565b90505b90565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b600080604183510361160f5760008060006020860151925060408601519150606086015160001a905061160387828585611930565b94509450505050611618565b60006002915091505b9250929050565b6000600481111561163357611632612da3565b5b81600481111561164657611645612da3565b5b031561178257600160048111156116605761165f612da3565b5b81600481111561167357611672612da3565b5b036116b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116aa90612e1e565b60405180910390fd5b600260048111156116c7576116c6612da3565b5b8160048111156116da576116d9612da3565b5b0361171a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171190612e8a565b60405180910390fd5b6003600481111561172e5761172d612da3565b5b81600481111561174157611740612da3565b5b03611781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177890612f1c565b60405180910390fd5b5b50565b611808846323b872dd60e01b8585856040516024016117a693929190612f3c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061140e565b50505050565b6060600061181b83611a12565b90506000602067ffffffffffffffff81111561183a5761183961254c565b5b6040519080825280601f01601f19166020018201604052801561186c5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b60606118918484600085611a62565b90509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001611915959493929190612f73565b60405160208183030381529060405280519060200120905090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561196b576000600391509150611a09565b6000600187878787604051600081526020016040526040516119909493929190612fe2565b6020604051602081039080840390855afa1580156119b2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a0057600060019250925050611a09565b80600092509250505b94509492505050565b60008060ff8360001c169050601f811115611a59576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b606082471015611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9e90613099565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ad0919061270f565b60006040518083038185875af1925050503d8060008114611b0d576040519150601f19603f3d011682016040523d82523d6000602084013e611b12565b606091505b5091509150611b2387838387611b2f565b92505050949350505050565b60608315611b91576000835103611b8957611b4985611ba4565b611b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7f90613105565b60405180910390fd5b5b829050611b9c565b611b9b8383611bc7565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611bda5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0e9190612c0a565b60405180910390fd5b600080fd5b600080fd5b6000819050919050565b611c3481611c21565b8114611c3f57600080fd5b50565b600081359050611c5181611c2b565b92915050565b600060208284031215611c6d57611c6c611c17565b5b6000611c7b84828501611c42565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611caf82611c84565b9050919050565b611cbf81611ca4565b8114611cca57600080fd5b50565b600081359050611cdc81611cb6565b92915050565b6000819050919050565b611cf581611ce2565b8114611d0057600080fd5b50565b600081359050611d1281611cec565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d3d57611d3c611d18565b5b8235905067ffffffffffffffff811115611d5a57611d59611d1d565b5b602083019150836001820283011115611d7657611d75611d22565b5b9250929050565b60008060008060008060a08789031215611d9a57611d99611c17565b5b6000611da889828a01611ccd565b9650506020611db989828a01611d03565b9550506040611dca89828a01611d03565b9450506060611ddb89828a01611c42565b935050608087013567ffffffffffffffff811115611dfc57611dfb611c1c565b5b611e0889828a01611d27565b92509250509295509295509295565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b611e4c81611e17565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e8c578082015181840152602081019050611e71565b60008484015250505050565b6000601f19601f8301169050919050565b6000611eb482611e52565b611ebe8185611e5d565b9350611ece818560208601611e6e565b611ed781611e98565b840191505092915050565b611eeb81611ce2565b82525050565b611efa81611ca4565b82525050565b611f0981611c21565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f4481611ce2565b82525050565b6000611f568383611f3b565b60208301905092915050565b6000602082019050919050565b6000611f7a82611f0f565b611f848185611f1a565b9350611f8f83611f2b565b8060005b83811015611fc0578151611fa78882611f4a565b9750611fb283611f62565b925050600181019050611f93565b5085935050505092915050565b600060e082019050611fe2600083018a611e43565b8181036020830152611ff48189611ea9565b905081810360408301526120088188611ea9565b90506120176060830187611ee2565b6120246080830186611ef1565b61203160a0830185611f00565b81810360c08301526120438184611f6f565b905098975050505050505050565b6000806000806080858703121561206b5761206a611c17565b5b600061207987828801611ccd565b945050602061208a87828801611d03565b935050604061209b87828801611d03565b92505060606120ac87828801611c42565b91505092959194509250565b60008115159050919050565b6120cd816120b8565b82525050565b600060c0820190506120e860008301896120c4565b6120f56020830188611ef1565b6121026040830187611ef1565b61210f6060830186611ee2565b61211c6080830185611ee2565b61212960a0830184611ee2565b979650505050505050565b60008060006040848603121561214d5761214c611c17565b5b600061215b86828701611c42565b935050602084013567ffffffffffffffff81111561217c5761217b611c1c565b5b61218886828701611d27565b92509250509250925092565b6000819050919050565b60006121b96121b46121af84611c84565b612194565b611c84565b9050919050565b60006121cb8261219e565b9050919050565b60006121dd826121c0565b9050919050565b6121ed816121d2565b82525050565b600060208201905061220860008301846121e4565b92915050565b7f48544c433a206f72646572206e6f7420696e6974696174656400000000000000600082015250565b6000612244601983611e5d565b915061224f8261220e565b602082019050919050565b6000602082019050818103600083015261227381612237565b9050919050565b7f48544c433a206f726465722066756c66696c6c65640000000000000000000000600082015250565b60006122b0601583611e5d565b91506122bb8261227a565b602082019050919050565b600060208201905081810360008301526122df816122a3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061232082611ce2565b915061232b83611ce2565b9250828201905080821115612343576123426122e6565b5b92915050565b7f48544c433a206f72646572206e6f742065787069726564000000000000000000600082015250565b600061237f601783611e5d565b915061238a82612349565b602082019050919050565b600060208201905081810360008301526123ae81612372565b9050919050565b7f48544c433a207a65726f20616464726573732072656465656d65720000000000600082015250565b60006123eb601b83611e5d565b91506123f6826123b5565b602082019050919050565b6000602082019050818103600083015261241a816123de565b9050919050565b7f48544c433a207a65726f2074696d656c6f636b00000000000000000000000000600082015250565b6000612457601383611e5d565b915061246282612421565b602082019050919050565b600060208201905081810360008301526124868161244a565b9050919050565b7f48544c433a207a65726f20616d6f756e74000000000000000000000000000000600082015250565b60006124c3601183611e5d565b91506124ce8261248d565b602082019050919050565b600060208201905081810360008301526124f2816124b6565b9050919050565b600060a08201905061250e6000830188611f00565b61251b6020830187611ef1565b6125286040830186611ee2565b6125356060830185611ee2565b6125426080830184611f00565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006040820190506125906000830185611f00565b61259d6020830184611f00565b9392505050565b7f48544c433a20696e76616c69642072656465656d6572207369676e6174757265600082015250565b60006125da602083611e5d565b91506125e5826125a4565b602082019050919050565b60006020820190508181036000830152612609816125cd565b9050919050565b600081905092915050565b82818337600083830152505050565b60006126368385612610565b935061264383858461261b565b82840190509392505050565b600061265c82848661262a565b91508190509392505050565b60008151905061267781611c2b565b92915050565b60006020828403121561269357612692611c17565b5b60006126a184828501612668565b91505092915050565b60006040820190506126bf6000830185611f00565b6126cc6020830184611ef1565b9392505050565b600081519050919050565b60006126e9826126d3565b6126f38185612610565b9350612703818560208601611e6e565b80840191505092915050565b600061271b82846126de565b915081905092915050565b7f48544c433a20696e636f72726563742073656372657400000000000000000000600082015250565b600061275c601683611e5d565b915061276782612726565b602082019050919050565b6000602082019050818103600083015261278b8161274f565b9050919050565b600082825260208201905092915050565b60006127af8385612792565b93506127bc83858461261b565b6127c583611e98565b840190509392505050565b600060208201905081810360008301526127eb8184866127a3565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061283b57607f821691505b60208210810361284e5761284d6127f4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128b67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612879565b6128c08683612879565b95508019841693508086168417925050509392505050565b60006128f36128ee6128e984611ce2565b612194565b611ce2565b9050919050565b6000819050919050565b61290d836128d8565b612921612919826128fa565b848454612886565b825550505050565b600090565b612936612929565b612941818484612904565b505050565b5b818110156129655761295a60008261292e565b600181019050612947565b5050565b601f8211156129aa5761297b81612854565b61298484612869565b81016020851015612993578190505b6129a761299f85612869565b830182612946565b50505b505050565b600082821c905092915050565b60006129cd600019846008026129af565b1980831691505092915050565b60006129e683836129bc565b9150826002028217905092915050565b6129ff82611e52565b67ffffffffffffffff811115612a1857612a1761254c565b5b612a228254612823565b612a2d828285612969565b600060209050601f831160018114612a605760008415612a4e578287015190505b612a5885826129da565b865550612ac0565b601f198416612a6e86612854565b60005b82811015612a9657848901518255600182019150602085019450602081019050612a71565b86831015612ab35784890151612aaf601f8916826129bc565b8355505b6001600288020188555050505b505050505050565b6000604082019050612add6000830185611ef1565b612aea6020830184611ee2565b9392505050565b7f48544c433a2073616d6520696e69746961746f7220616e642072656465656d6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b4d602183611e5d565b9150612b5882612af1565b604082019050919050565b60006020820190508181036000830152612b7c81612b40565b9050919050565b7f48544c433a206475706c6963617465206f726465720000000000000000000000600082015250565b6000612bb9601583611e5d565b9150612bc482612b83565b602082019050919050565b60006020820190508181036000830152612be881612bac565b9050919050565b6000602082019050612c046000830184611ee2565b92915050565b60006020820190508181036000830152612c248184611ea9565b905092915050565b6000819050602082019050919050565b6000612c488251611c21565b80915050919050565b6000612c5c826126d3565b82612c6684612c2c565b9050612c7181612c3c565b92506020821015612cb157612cac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802612879565b831692505b5050919050565b612cc1816120b8565b8114612ccc57600080fd5b50565b600081519050612cde81612cb8565b92915050565b600060208284031215612cfa57612cf9611c17565b5b6000612d0884828501612ccf565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612d6d602a83611e5d565b9150612d7882612d11565b604082019050919050565b60006020820190508181036000830152612d9c81612d60565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612e08601883611e5d565b9150612e1382612dd2565b602082019050919050565b60006020820190508181036000830152612e3781612dfb565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612e74601f83611e5d565b9150612e7f82612e3e565b602082019050919050565b60006020820190508181036000830152612ea381612e67565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f06602283611e5d565b9150612f1182612eaa565b604082019050919050565b60006020820190508181036000830152612f3581612ef9565b9050919050565b6000606082019050612f516000830186611ef1565b612f5e6020830185611ef1565b612f6b6040830184611ee2565b949350505050565b600060a082019050612f886000830188611f00565b612f956020830187611f00565b612fa26040830186611f00565b612faf6060830185611ee2565b612fbc6080830184611ef1565b9695505050505050565b600060ff82169050919050565b612fdc81612fc6565b82525050565b6000608082019050612ff76000830187611f00565b6130046020830186612fd3565b6130116040830185611f00565b61301e6060830184611f00565b95945050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613083602683611e5d565b915061308e82613027565b604082019050919050565b600060208201905081810360008301526130b281613076565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006130ef601d83611e5d565b91506130fa826130b9565b602082019050919050565b6000602082019050818103600083015261311e816130e2565b905091905056fea26469706673582212207c75a3e49f34c74941ab4447b767e6ba95b63bf598e4be4a45fc13760b86644664736f6c63430008120033",
}

// GardenHTLCABI is the input ABI used to generate the binding from.
// Deprecated: Use GardenHTLCMetaData.ABI instead.
var GardenHTLCABI = GardenHTLCMetaData.ABI

// GardenHTLCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GardenHTLCMetaData.Bin instead.
var GardenHTLCBin = GardenHTLCMetaData.Bin

// DeployGardenHTLC deploys a new Ethereum contract, binding an instance of GardenHTLC to it.
func DeployGardenHTLC(auth *bind.TransactOpts, backend bind.ContractBackend, token_ common.Address, name string, version string) (common.Address, *types.Transaction, *GardenHTLC, error) {
	parsed, err := GardenHTLCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GardenHTLCBin), backend, token_, name, version)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GardenHTLC{GardenHTLCCaller: GardenHTLCCaller{contract: contract}, GardenHTLCTransactor: GardenHTLCTransactor{contract: contract}, GardenHTLCFilterer: GardenHTLCFilterer{contract: contract}}, nil
}

// GardenHTLC is an auto generated Go binding around an Ethereum contract.
type GardenHTLC struct {
	GardenHTLCCaller     // Read-only binding to the contract
	GardenHTLCTransactor // Write-only binding to the contract
	GardenHTLCFilterer   // Log filterer for contract events
}

// GardenHTLCCaller is an auto generated read-only Go binding around an Ethereum contract.
type GardenHTLCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GardenHTLCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GardenHTLCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GardenHTLCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GardenHTLCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GardenHTLCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GardenHTLCSession struct {
	Contract     *GardenHTLC       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GardenHTLCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GardenHTLCCallerSession struct {
	Contract *GardenHTLCCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// GardenHTLCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GardenHTLCTransactorSession struct {
	Contract     *GardenHTLCTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// GardenHTLCRaw is an auto generated low-level Go binding around an Ethereum contract.
type GardenHTLCRaw struct {
	Contract *GardenHTLC // Generic contract binding to access the raw methods on
}

// GardenHTLCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GardenHTLCCallerRaw struct {
	Contract *GardenHTLCCaller // Generic read-only contract binding to access the raw methods on
}

// GardenHTLCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GardenHTLCTransactorRaw struct {
	Contract *GardenHTLCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGardenHTLC creates a new instance of GardenHTLC, bound to a specific deployed contract.
func NewGardenHTLC(address common.Address, backend bind.ContractBackend) (*GardenHTLC, error) {
	contract, err := bindGardenHTLC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GardenHTLC{GardenHTLCCaller: GardenHTLCCaller{contract: contract}, GardenHTLCTransactor: GardenHTLCTransactor{contract: contract}, GardenHTLCFilterer: GardenHTLCFilterer{contract: contract}}, nil
}

// NewGardenHTLCCaller creates a new read-only instance of GardenHTLC, bound to a specific deployed contract.
func NewGardenHTLCCaller(address common.Address, caller bind.ContractCaller) (*GardenHTLCCaller, error) {
	contract, err := bindGardenHTLC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GardenHTLCCaller{contract: contract}, nil
}

// NewGardenHTLCTransactor creates a new write-only instance of GardenHTLC, bound to a specific deployed contract.
func NewGardenHTLCTransactor(address common.Address, transactor bind.ContractTransactor) (*GardenHTLCTransactor, error) {
	contract, err := bindGardenHTLC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GardenHTLCTransactor{contract: contract}, nil
}

// NewGardenHTLCFilterer creates a new log filterer instance of GardenHTLC, bound to a specific deployed contract.
func NewGardenHTLCFilterer(address common.Address, filterer bind.ContractFilterer) (*GardenHTLCFilterer, error) {
	contract, err := bindGardenHTLC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GardenHTLCFilterer{contract: contract}, nil
}

// bindGardenHTLC binds a generic wrapper to an already deployed contract.
func bindGardenHTLC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GardenHTLCMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GardenHTLC *GardenHTLCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GardenHTLC.Contract.GardenHTLCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GardenHTLC *GardenHTLCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GardenHTLC.Contract.GardenHTLCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GardenHTLC *GardenHTLCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GardenHTLC.Contract.GardenHTLCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GardenHTLC *GardenHTLCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GardenHTLC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GardenHTLC *GardenHTLCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GardenHTLC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GardenHTLC *GardenHTLCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GardenHTLC.Contract.contract.Transact(opts, method, params...)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GardenHTLC *GardenHTLCCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _GardenHTLC.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GardenHTLC *GardenHTLCSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _GardenHTLC.Contract.Eip712Domain(&_GardenHTLC.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_GardenHTLC *GardenHTLCCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _GardenHTLC.Contract.Eip712Domain(&_GardenHTLC.CallOpts)
}

// Orders is a free data retrieval call binding the contract method 0x9c3f1e90.
//
// Solidity: function orders(bytes32 ) view returns(bool isFulfilled, address initiator, address redeemer, uint256 initiatedAt, uint256 timelock, uint256 amount)
func (_GardenHTLC *GardenHTLCCaller) Orders(opts *bind.CallOpts, arg0 [32]byte) (struct {
	IsFulfilled bool
	Initiator   common.Address
	Redeemer    common.Address
	InitiatedAt *big.Int
	Timelock    *big.Int
	Amount      *big.Int
}, error) {
	var out []interface{}
	err := _GardenHTLC.contract.Call(opts, &out, "orders", arg0)

	outstruct := new(struct {
		IsFulfilled bool
		Initiator   common.Address
		Redeemer    common.Address
		InitiatedAt *big.Int
		Timelock    *big.Int
		Amount      *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsFulfilled = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Initiator = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Redeemer = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.InitiatedAt = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Timelock = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Orders is a free data retrieval call binding the contract method 0x9c3f1e90.
//
// Solidity: function orders(bytes32 ) view returns(bool isFulfilled, address initiator, address redeemer, uint256 initiatedAt, uint256 timelock, uint256 amount)
func (_GardenHTLC *GardenHTLCSession) Orders(arg0 [32]byte) (struct {
	IsFulfilled bool
	Initiator   common.Address
	Redeemer    common.Address
	InitiatedAt *big.Int
	Timelock    *big.Int
	Amount      *big.Int
}, error) {
	return _GardenHTLC.Contract.Orders(&_GardenHTLC.CallOpts, arg0)
}

// Orders is a free data retrieval call binding the contract method 0x9c3f1e90.
//
// Solidity: function orders(bytes32 ) view returns(bool isFulfilled, address initiator, address redeemer, uint256 initiatedAt, uint256 timelock, uint256 amount)
func (_GardenHTLC *GardenHTLCCallerSession) Orders(arg0 [32]byte) (struct {
	IsFulfilled bool
	Initiator   common.Address
	Redeemer    common.Address
	InitiatedAt *big.Int
	Timelock    *big.Int
	Amount      *big.Int
}, error) {
	return _GardenHTLC.Contract.Orders(&_GardenHTLC.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GardenHTLC *GardenHTLCCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _GardenHTLC.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GardenHTLC *GardenHTLCSession) Token() (common.Address, error) {
	return _GardenHTLC.Contract.Token(&_GardenHTLC.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_GardenHTLC *GardenHTLCCallerSession) Token() (common.Address, error) {
	return _GardenHTLC.Contract.Token(&_GardenHTLC.CallOpts)
}

// Initiate is a paid mutator transaction binding the contract method 0x97ffc7ae.
//
// Solidity: function initiate(address redeemer, uint256 timelock, uint256 amount, bytes32 secretHash) returns()
func (_GardenHTLC *GardenHTLCTransactor) Initiate(opts *bind.TransactOpts, redeemer common.Address, timelock *big.Int, amount *big.Int, secretHash [32]byte) (*types.Transaction, error) {
	return _GardenHTLC.contract.Transact(opts, "initiate", redeemer, timelock, amount, secretHash)
}

// Initiate is a paid mutator transaction binding the contract method 0x97ffc7ae.
//
// Solidity: function initiate(address redeemer, uint256 timelock, uint256 amount, bytes32 secretHash) returns()
func (_GardenHTLC *GardenHTLCSession) Initiate(redeemer common.Address, timelock *big.Int, amount *big.Int, secretHash [32]byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.Initiate(&_GardenHTLC.TransactOpts, redeemer, timelock, amount, secretHash)
}

// Initiate is a paid mutator transaction binding the contract method 0x97ffc7ae.
//
// Solidity: function initiate(address redeemer, uint256 timelock, uint256 amount, bytes32 secretHash) returns()
func (_GardenHTLC *GardenHTLCTransactorSession) Initiate(redeemer common.Address, timelock *big.Int, amount *big.Int, secretHash [32]byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.Initiate(&_GardenHTLC.TransactOpts, redeemer, timelock, amount, secretHash)
}

// InitiateWithSignature is a paid mutator transaction binding the contract method 0x7929d59d.
//
// Solidity: function initiateWithSignature(address redeemer, uint256 timelock, uint256 amount, bytes32 secretHash, bytes signature) returns()
func (_GardenHTLC *GardenHTLCTransactor) InitiateWithSignature(opts *bind.TransactOpts, redeemer common.Address, timelock *big.Int, amount *big.Int, secretHash [32]byte, signature []byte) (*types.Transaction, error) {
	return _GardenHTLC.contract.Transact(opts, "initiateWithSignature", redeemer, timelock, amount, secretHash, signature)
}

// InitiateWithSignature is a paid mutator transaction binding the contract method 0x7929d59d.
//
// Solidity: function initiateWithSignature(address redeemer, uint256 timelock, uint256 amount, bytes32 secretHash, bytes signature) returns()
func (_GardenHTLC *GardenHTLCSession) InitiateWithSignature(redeemer common.Address, timelock *big.Int, amount *big.Int, secretHash [32]byte, signature []byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.InitiateWithSignature(&_GardenHTLC.TransactOpts, redeemer, timelock, amount, secretHash, signature)
}

// InitiateWithSignature is a paid mutator transaction binding the contract method 0x7929d59d.
//
// Solidity: function initiateWithSignature(address redeemer, uint256 timelock, uint256 amount, bytes32 secretHash, bytes signature) returns()
func (_GardenHTLC *GardenHTLCTransactorSession) InitiateWithSignature(redeemer common.Address, timelock *big.Int, amount *big.Int, secretHash [32]byte, signature []byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.InitiateWithSignature(&_GardenHTLC.TransactOpts, redeemer, timelock, amount, secretHash, signature)
}

// InstantRefund is a paid mutator transaction binding the contract method 0xedaf5fac.
//
// Solidity: function instantRefund(bytes32 orderID, bytes signature) returns()
func (_GardenHTLC *GardenHTLCTransactor) InstantRefund(opts *bind.TransactOpts, orderID [32]byte, signature []byte) (*types.Transaction, error) {
	return _GardenHTLC.contract.Transact(opts, "instantRefund", orderID, signature)
}

// InstantRefund is a paid mutator transaction binding the contract method 0xedaf5fac.
//
// Solidity: function instantRefund(bytes32 orderID, bytes signature) returns()
func (_GardenHTLC *GardenHTLCSession) InstantRefund(orderID [32]byte, signature []byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.InstantRefund(&_GardenHTLC.TransactOpts, orderID, signature)
}

// InstantRefund is a paid mutator transaction binding the contract method 0xedaf5fac.
//
// Solidity: function instantRefund(bytes32 orderID, bytes signature) returns()
func (_GardenHTLC *GardenHTLCTransactorSession) InstantRefund(orderID [32]byte, signature []byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.InstantRefund(&_GardenHTLC.TransactOpts, orderID, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0xf7ff7207.
//
// Solidity: function redeem(bytes32 orderID, bytes secret) returns()
func (_GardenHTLC *GardenHTLCTransactor) Redeem(opts *bind.TransactOpts, orderID [32]byte, secret []byte) (*types.Transaction, error) {
	return _GardenHTLC.contract.Transact(opts, "redeem", orderID, secret)
}

// Redeem is a paid mutator transaction binding the contract method 0xf7ff7207.
//
// Solidity: function redeem(bytes32 orderID, bytes secret) returns()
func (_GardenHTLC *GardenHTLCSession) Redeem(orderID [32]byte, secret []byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.Redeem(&_GardenHTLC.TransactOpts, orderID, secret)
}

// Redeem is a paid mutator transaction binding the contract method 0xf7ff7207.
//
// Solidity: function redeem(bytes32 orderID, bytes secret) returns()
func (_GardenHTLC *GardenHTLCTransactorSession) Redeem(orderID [32]byte, secret []byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.Redeem(&_GardenHTLC.TransactOpts, orderID, secret)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 orderID) returns()
func (_GardenHTLC *GardenHTLCTransactor) Refund(opts *bind.TransactOpts, orderID [32]byte) (*types.Transaction, error) {
	return _GardenHTLC.contract.Transact(opts, "refund", orderID)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 orderID) returns()
func (_GardenHTLC *GardenHTLCSession) Refund(orderID [32]byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.Refund(&_GardenHTLC.TransactOpts, orderID)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 orderID) returns()
func (_GardenHTLC *GardenHTLCTransactorSession) Refund(orderID [32]byte) (*types.Transaction, error) {
	return _GardenHTLC.Contract.Refund(&_GardenHTLC.TransactOpts, orderID)
}

// GardenHTLCEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the GardenHTLC contract.
type GardenHTLCEIP712DomainChangedIterator struct {
	Event *GardenHTLCEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GardenHTLCEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GardenHTLCEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GardenHTLCEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GardenHTLCEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GardenHTLCEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GardenHTLCEIP712DomainChanged represents a EIP712DomainChanged event raised by the GardenHTLC contract.
type GardenHTLCEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GardenHTLC *GardenHTLCFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*GardenHTLCEIP712DomainChangedIterator, error) {

	logs, sub, err := _GardenHTLC.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &GardenHTLCEIP712DomainChangedIterator{contract: _GardenHTLC.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GardenHTLC *GardenHTLCFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *GardenHTLCEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _GardenHTLC.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GardenHTLCEIP712DomainChanged)
				if err := _GardenHTLC.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_GardenHTLC *GardenHTLCFilterer) ParseEIP712DomainChanged(log types.Log) (*GardenHTLCEIP712DomainChanged, error) {
	event := new(GardenHTLCEIP712DomainChanged)
	if err := _GardenHTLC.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GardenHTLCInitiatedIterator is returned from FilterInitiated and is used to iterate over the raw logs and unpacked data for Initiated events raised by the GardenHTLC contract.
type GardenHTLCInitiatedIterator struct {
	Event *GardenHTLCInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GardenHTLCInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GardenHTLCInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GardenHTLCInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GardenHTLCInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GardenHTLCInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GardenHTLCInitiated represents a Initiated event raised by the GardenHTLC contract.
type GardenHTLCInitiated struct {
	OrderID    [32]byte
	SecretHash [32]byte
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInitiated is a free log retrieval operation binding the contract event 0x01b41cbd4bbcc3c5b968a04d3fbdd8c1648a39ff6d9a3929b4840cea1142bc65.
//
// Solidity: event Initiated(bytes32 indexed orderID, bytes32 indexed secretHash, uint256 amount)
func (_GardenHTLC *GardenHTLCFilterer) FilterInitiated(opts *bind.FilterOpts, orderID [][32]byte, secretHash [][32]byte) (*GardenHTLCInitiatedIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}
	var secretHashRule []interface{}
	for _, secretHashItem := range secretHash {
		secretHashRule = append(secretHashRule, secretHashItem)
	}

	logs, sub, err := _GardenHTLC.contract.FilterLogs(opts, "Initiated", orderIDRule, secretHashRule)
	if err != nil {
		return nil, err
	}
	return &GardenHTLCInitiatedIterator{contract: _GardenHTLC.contract, event: "Initiated", logs: logs, sub: sub}, nil
}

// WatchInitiated is a free log subscription operation binding the contract event 0x01b41cbd4bbcc3c5b968a04d3fbdd8c1648a39ff6d9a3929b4840cea1142bc65.
//
// Solidity: event Initiated(bytes32 indexed orderID, bytes32 indexed secretHash, uint256 amount)
func (_GardenHTLC *GardenHTLCFilterer) WatchInitiated(opts *bind.WatchOpts, sink chan<- *GardenHTLCInitiated, orderID [][32]byte, secretHash [][32]byte) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}
	var secretHashRule []interface{}
	for _, secretHashItem := range secretHash {
		secretHashRule = append(secretHashRule, secretHashItem)
	}

	logs, sub, err := _GardenHTLC.contract.WatchLogs(opts, "Initiated", orderIDRule, secretHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GardenHTLCInitiated)
				if err := _GardenHTLC.contract.UnpackLog(event, "Initiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiated is a log parse operation binding the contract event 0x01b41cbd4bbcc3c5b968a04d3fbdd8c1648a39ff6d9a3929b4840cea1142bc65.
//
// Solidity: event Initiated(bytes32 indexed orderID, bytes32 indexed secretHash, uint256 amount)
func (_GardenHTLC *GardenHTLCFilterer) ParseInitiated(log types.Log) (*GardenHTLCInitiated, error) {
	event := new(GardenHTLCInitiated)
	if err := _GardenHTLC.contract.UnpackLog(event, "Initiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GardenHTLCRedeemedIterator is returned from FilterRedeemed and is used to iterate over the raw logs and unpacked data for Redeemed events raised by the GardenHTLC contract.
type GardenHTLCRedeemedIterator struct {
	Event *GardenHTLCRedeemed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GardenHTLCRedeemedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GardenHTLCRedeemed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GardenHTLCRedeemed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GardenHTLCRedeemedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GardenHTLCRedeemedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GardenHTLCRedeemed represents a Redeemed event raised by the GardenHTLC contract.
type GardenHTLCRedeemed struct {
	OrderID    [32]byte
	SecretHash [32]byte
	Secret     []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemed is a free log retrieval operation binding the contract event 0x4c9a044220477b4e94dbb0d07ff6ff4ac30d443bef59098c4541b006954778e2.
//
// Solidity: event Redeemed(bytes32 indexed orderID, bytes32 indexed secretHash, bytes secret)
func (_GardenHTLC *GardenHTLCFilterer) FilterRedeemed(opts *bind.FilterOpts, orderID [][32]byte, secretHash [][32]byte) (*GardenHTLCRedeemedIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}
	var secretHashRule []interface{}
	for _, secretHashItem := range secretHash {
		secretHashRule = append(secretHashRule, secretHashItem)
	}

	logs, sub, err := _GardenHTLC.contract.FilterLogs(opts, "Redeemed", orderIDRule, secretHashRule)
	if err != nil {
		return nil, err
	}
	return &GardenHTLCRedeemedIterator{contract: _GardenHTLC.contract, event: "Redeemed", logs: logs, sub: sub}, nil
}

// WatchRedeemed is a free log subscription operation binding the contract event 0x4c9a044220477b4e94dbb0d07ff6ff4ac30d443bef59098c4541b006954778e2.
//
// Solidity: event Redeemed(bytes32 indexed orderID, bytes32 indexed secretHash, bytes secret)
func (_GardenHTLC *GardenHTLCFilterer) WatchRedeemed(opts *bind.WatchOpts, sink chan<- *GardenHTLCRedeemed, orderID [][32]byte, secretHash [][32]byte) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}
	var secretHashRule []interface{}
	for _, secretHashItem := range secretHash {
		secretHashRule = append(secretHashRule, secretHashItem)
	}

	logs, sub, err := _GardenHTLC.contract.WatchLogs(opts, "Redeemed", orderIDRule, secretHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GardenHTLCRedeemed)
				if err := _GardenHTLC.contract.UnpackLog(event, "Redeemed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemed is a log parse operation binding the contract event 0x4c9a044220477b4e94dbb0d07ff6ff4ac30d443bef59098c4541b006954778e2.
//
// Solidity: event Redeemed(bytes32 indexed orderID, bytes32 indexed secretHash, bytes secret)
func (_GardenHTLC *GardenHTLCFilterer) ParseRedeemed(log types.Log) (*GardenHTLCRedeemed, error) {
	event := new(GardenHTLCRedeemed)
	if err := _GardenHTLC.contract.UnpackLog(event, "Redeemed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GardenHTLCRefundedIterator is returned from FilterRefunded and is used to iterate over the raw logs and unpacked data for Refunded events raised by the GardenHTLC contract.
type GardenHTLCRefundedIterator struct {
	Event *GardenHTLCRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GardenHTLCRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GardenHTLCRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GardenHTLCRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GardenHTLCRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GardenHTLCRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GardenHTLCRefunded represents a Refunded event raised by the GardenHTLC contract.
type GardenHTLCRefunded struct {
	OrderID [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRefunded is a free log retrieval operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderID)
func (_GardenHTLC *GardenHTLCFilterer) FilterRefunded(opts *bind.FilterOpts, orderID [][32]byte) (*GardenHTLCRefundedIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _GardenHTLC.contract.FilterLogs(opts, "Refunded", orderIDRule)
	if err != nil {
		return nil, err
	}
	return &GardenHTLCRefundedIterator{contract: _GardenHTLC.contract, event: "Refunded", logs: logs, sub: sub}, nil
}

// WatchRefunded is a free log subscription operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderID)
func (_GardenHTLC *GardenHTLCFilterer) WatchRefunded(opts *bind.WatchOpts, sink chan<- *GardenHTLCRefunded, orderID [][32]byte) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _GardenHTLC.contract.WatchLogs(opts, "Refunded", orderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GardenHTLCRefunded)
				if err := _GardenHTLC.contract.UnpackLog(event, "Refunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefunded is a log parse operation binding the contract event 0xfe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0.
//
// Solidity: event Refunded(bytes32 indexed orderID)
func (_GardenHTLC *GardenHTLCFilterer) ParseRefunded(log types.Log) (*GardenHTLCRefunded, error) {
	event := new(GardenHTLCRefunded)
	if err := _GardenHTLC.contract.UnpackLog(event, "Refunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
